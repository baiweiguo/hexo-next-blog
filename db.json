{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/me.png","path":"images/me.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1544790179237},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1544790179238},{"_id":"themes/next/.gitignore","hash":"c519b4a2b5d47750d2fc4d1fd50651d40ce79598","modified":1544790179238},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1544790179238},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1544790179238},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1544790179238},{"_id":"themes/next/_config.yml","hash":"745353cea9756f3ccebfb1471adf6319aee88b7a","modified":1544790179238},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1544790179238},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1544790179239},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1544790179250},{"_id":"source/_posts/auto-bak-hexo-blog.md","hash":"0dd57f8f7a0aa140449e018f22336d27353941fd","modified":1544790659056},{"_id":"source/_posts/cpp-extension-1.md","hash":"93d600e6c7f80337c9388732a80a362187116da8","modified":1544790179199},{"_id":"source/_posts/cpp-overload.md","hash":"b54251d7f7c80b21aa1dbb3b943e0ac5b5296d2d","modified":1544790179200},{"_id":"source/_posts/cpp-type.md","hash":"c17b79197085219dec3caf5235ec8863f7590e6a","modified":1544790179200},{"_id":"source/_posts/django-start.md","hash":"b26bf83a09a125e8d10c0d755393050fd3d4e06f","modified":1544790179201},{"_id":"source/_posts/dns.md","hash":"cd09649c817c330303ec63c5f706e76837537873","modified":1544790179201},{"_id":"source/_posts/hello-world.md","hash":"8a297b7a9b21c45d72c7e0111f8b9dae2506c593","modified":1544790179212},{"_id":"source/_posts/linux-attack-cmd.md","hash":"5202ddbc5592a13cbb327eaa915d2eb668d9b79c","modified":1544790179212},{"_id":"source/_posts/macro.md","hash":"886120052168feef3cdd6236723b1854143bcf43","modified":1544790179212},{"_id":"source/_posts/observer-li.md","hash":"5d3552933505d314726b380bb8830ad4ba146331","modified":1544790179212},{"_id":"source/_posts/server-framework.md","hash":"37b6e6d5049ed46b0934e9fdf1a46ea657c166a1","modified":1544790179212},{"_id":"source/_posts/sharpen-images.md","hash":"480600d72e9a753ce872a19636bbf78e83173353","modified":1544790179212},{"_id":"source/_posts/sharpen-litao.md","hash":"ed0a9cbcb0c912c9e2490c812260f6def346aeee","modified":1544790179212},{"_id":"source/_posts/singleton.md","hash":"35fe239bd07ad0d6041d2c63bf04cb050b59e246","modified":1544790179213},{"_id":"source/_posts/static-class-func-var.md","hash":"70669e956aff22f0acfd2e00a7df61b63ccdf212","modified":1544790179214},{"_id":"source/_posts/svm.md","hash":"ab63add544e063c4ae382509c51fc1a0468c3502","modified":1544790179214},{"_id":"source/_posts/strategy-li.md","hash":"8ded856ee14f0e24250acafac98b026a2bde0f8a","modified":1544790179214},{"_id":"source/_posts/template-method-li.md","hash":"ca7f4f9732f284fc522487903cae9dcd5008c6f6","modified":1544790179214},{"_id":"source/_posts/yr-rules-scan-proc.md","hash":"07444ad67479e95218a93965e6324f659babcc4c","modified":1544790179214},{"_id":"source/categories/index.md","hash":"23b912e77a37f24dcd2e36473ff27e60a1e07dfe","modified":1544790179216},{"_id":"source/giter/index.md","hash":"9d74124182d2184235cf9b9fb97625db2b0decf5","modified":1544790179216},{"_id":"source/tags/index.md","hash":"fff7da664eff92d6c90d7078226f3788671cf27c","modified":1544790179216},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1544790179239},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1544790179239},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1544790179239},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1544790179239},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1544790179239},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1544790179239},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1544790179240},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1544790179240},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1544790179240},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1544790179240},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1544790179240},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1544790179240},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1544790179241},{"_id":"themes/next/layout/_layout.swig","hash":"d8f9bbaaa25832610a7b1a7366174b51e8cb1cab","modified":1544790179242},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1544790179249},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1544790179249},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1544790179249},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1544790179249},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1544790179250},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1544790179250},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1544790179250},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1544790179250},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1544790179284},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1544790179285},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1544790179285},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544790179265},{"_id":"source/_posts/cpp-type/Selection_001.png","hash":"b6a65ee9dff5045520415250977ff5c8025e2037","modified":1544790179200},{"_id":"source/_posts/cpp-type/Selection_002.png","hash":"767d6f5f196d09a3bdc79661b68ed5606440a331","modified":1544790179201},{"_id":"source/_posts/cpp-type/Selection_003.png","hash":"e2d1e23953bcb6344b9038369823bed5ae487fe0","modified":1544790179201},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1544790179241},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1544790179241},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1544790179242},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1544790179242},{"_id":"themes/next/layout/_macro/post.swig","hash":"e6016def9b512188f4c2725399c9adc7bc41cdae","modified":1544790179242},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"01541d2b734020e7ab61488da39cfcf00e57dff4","modified":1544790179242},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1544790179242},{"_id":"themes/next/layout/_partials/comments.swig","hash":"3016d8b222694fbb1214af9c84ab4b9efb93c93d","modified":1544790179243},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1544790179243},{"_id":"themes/next/layout/_partials/footer.swig","hash":"56b0bcee4758fd0f32884b0ce9b650d678d7b8fc","modified":1544790179243},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1544790179243},{"_id":"themes/next/layout/_partials/header.swig","hash":"5a9d89f8e7ec312147e647206356e618474cfa1d","modified":1544790179243},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1544790179244},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1544790179244},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1544790179244},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1544790179245},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1544790179245},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1544790179245},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1544790179249},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1544790179250},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1544790179251},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1544790179251},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1544790179251},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1544790179251},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1544790179265},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1544790179265},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1544790179265},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1544790179266},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1544790179266},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1544790179266},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1544790179266},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1544790179266},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1544790179267},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1544790179267},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1544790179267},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1544790179267},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1544790179268},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1544790179268},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1544790179268},{"_id":"source/_posts/singleton/abc0000000007.png","hash":"aa742c1358fccadb40b00dfea93a0a587f5e49af","modified":1544790179213},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544790179246},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544790179246},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544790179261},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544790179261},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544790179261},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544790179264},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544790179265},{"_id":"themes/next/source/images/me.png","hash":"bfdd5fa115be9e53a5105f02f33b08a1d9540d84","modified":1544790179267},{"_id":"source/_posts/dns/abc0000000001.png","hash":"38e2648ce22631ff411f368c825a0c9c357983ef","modified":1544790179203},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1544790179241},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1544790179241},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1544790179243},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1544790179243},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1544790179244},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1544790179244},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1544790179244},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1544790179244},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1544790179245},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1544790179245},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1544790179245},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1544790179246},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1544790179246},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1544790179246},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"4abc01bc870e1d7a783cdbd26166edc782a6a4f4","modified":1544790179247},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1544790179248},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1544790179248},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1544790179248},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1544790179249},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1544790179249},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1544790179261},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1544790179261},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1544790179261},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1544790179264},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1544790179264},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fc185c6cec79593775d1c2440dbe2a71cfbe2e99","modified":1544790179265},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1544790179268},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1544790179268},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1544790179268},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1544790179269},{"_id":"themes/next/source/js/src/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1544790179269},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1544790179269},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1544790179269},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1544790179269},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1544790179270},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1544790179270},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1544790179272},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1544790179275},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1544790179275},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1544790179275},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1544790179275},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1544790179276},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1544790179276},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1544790179276},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1544790179276},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1544790179277},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1544790179280},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1544790179281},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1544790179281},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1544790179281},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1544790179281},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1544790179281},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1544790179282},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1544790179282},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1544790179282},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1544790179284},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1544790179284},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1544790179284},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1544790179281},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1544790179246},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1544790179246},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1544790179246},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1544790179247},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1544790179247},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1544790179247},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1544790179247},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1544790179247},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1544790179248},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1544790179248},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1544790179248},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"ea8078fa9e10be2bb042749d8b6a97adc38f914c","modified":1544790179248},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1544790179260},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1544790179252},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1544790179252},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1544790179252},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1544790179252},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1544790179255},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1544790179258},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1544790179260},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1544790179260},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1544790179260},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1544790179260},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1544790179261},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1544790179261},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1544790179262},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1544790179262},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1544790179262},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1544790179262},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1544790179262},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1544790179262},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1544790179263},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1544790179263},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1544790179263},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1544790179263},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1544790179263},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1544790179264},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1544790179264},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1544790179264},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1544790179264},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1544790179264},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1544790179264},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1544790179269},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1544790179272},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1544790179273},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1544790179273},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1544790179273},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1544790179273},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1544790179273},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1544790179274},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1544790179275},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1544790179275},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1544790179276},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1544790179276},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1544790179277},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1544790179277},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1544790179277},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1544790179282},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1544790179282},{"_id":"source/_posts/dns/abc0000000003.png","hash":"618dc843c235e3b7c317bc99c88048ef361bab43","modified":1544790179208},{"_id":"source/_posts/dns/abc0000000004.png","hash":"5368d43a2c54a51e036f383f306f08625000b96b","modified":1544790179209},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1544790179278},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1544790179278},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1544790179280},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1544790179280},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1544790179283},{"_id":"source/_posts/dns/abc0000000000.png","hash":"2b8cb958634390187577c5a4cef8f385d989e910","modified":1544790179202},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1544790179252},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1544790179253},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1544790179253},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1544790179253},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1544790179253},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1544790179253},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1544790179253},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1544790179254},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1544790179254},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1544790179254},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1544790179254},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1544790179254},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1544790179254},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1544790179255},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"fdfadbb4483043c7e0afd541ee9712389e633517","modified":1544790179255},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1544790179255},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1544790179255},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1544790179255},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1544790179256},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1544790179256},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1544790179256},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1544790179256},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1544790179256},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1544790179256},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1544790179256},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1544790179257},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1544790179257},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"f9dca2554be7feac84f952a75b5d6f07c3b9e9e7","modified":1544790179257},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1544790179257},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1544790179257},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1544790179257},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1544790179257},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1544790179258},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1544790179258},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1544790179258},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1544790179258},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1544790179258},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1544790179258},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1544790179258},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1544790179259},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1544790179259},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1544790179259},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1544790179259},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1544790179259},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1544790179259},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1544790179259},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1544790179260},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1544790179260},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1544790179262},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1544790179262},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1544790179263},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1544790179273},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1544790179273},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1544790179274},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1544790179274},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1544790179274},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1544790179274},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1544790179279},{"_id":"source/_posts/yr-rules-scan-proc/abc0000000006.png","hash":"66729ea5e1743e29193cd4d855fad16e9f3e4412","modified":1544790179215},{"_id":"source/_posts/dns/abc0000000002.png","hash":"5a56f151e6035917c79b59e8643acfb4532e104a","modified":1544790179206},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1544790179272},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1544790179279},{"_id":"source/_posts/dns/abc0000000005.png","hash":"6bd162635d39bf35bec095e5a6bea0b7f07a5ba6","modified":1544790179212},{"_id":"public/baidusitemap.xml","hash":"31c0e140a4bbd98d4cb53a371a69abdf2f3a7692","modified":1544790739582},{"_id":"public/atom.xml","hash":"4c6029575279c09965a89111e2290b7e5032ea7b","modified":1544790739583},{"_id":"public/search.xml","hash":"024b6f11115f8e962320cab755b3aa317675effc","modified":1544790739599},{"_id":"public/sitemap.xml","hash":"cd3bc0f4b69a0638c0dddacdf9d6242014662898","modified":1544790739599},{"_id":"public/categories/index.html","hash":"2b624ca4847fdc4a665b00a8225399b7625bfc1f","modified":1544790298402},{"_id":"public/giter/index.html","hash":"e93f079778e6fe33cad355288f89896a07c37ff9","modified":1544790298403},{"_id":"public/tags/index.html","hash":"ae497983f3ad4a8c5c86478fb99f1a8a296e290f","modified":1544790298403},{"_id":"public/2018/12/14/hello-world/index.html","hash":"a027616479d026600244c93f79af692808e415a1","modified":1544790298403},{"_id":"public/2017/09/27/django-start/index.html","hash":"2c125a4f819727f7a2c56716bd0ef8f6fe1f020e","modified":1544790298403},{"_id":"public/2017/08/14/template-method-li/index.html","hash":"aa128dd7adfb39f39d910e14d4abff69aae75ce9","modified":1544790298403},{"_id":"public/2017/08/14/strategy-li/index.html","hash":"2146a689aa5ac77f893fd2039f97350463de2b2b","modified":1544790298403},{"_id":"public/2017/08/14/observer-li/index.html","hash":"db5ce8cfaa5603ce6645ab43c8c00e52af9f2258","modified":1544790298403},{"_id":"public/2017/08/04/sharpen-litao/index.html","hash":"eaa304ce97e875b8e8d620ae73df1aa2a88e7b51","modified":1544790298403},{"_id":"public/2017/07/22/cpp-overload/index.html","hash":"89b267f24b433d30a9fe9befe6282d6670c80e97","modified":1544790298403},{"_id":"public/2017/07/16/cpp-extension-1/index.html","hash":"64f774b3fd96b7d811007dd5864bfe6edbd7d826","modified":1544790298403},{"_id":"public/2017/07/15/cpp-type/index.html","hash":"b41d6e28e1a6a74b403eb6e50fdff2dd7007c1aa","modified":1544790298403},{"_id":"public/2017/05/01/sharpen-images/index.html","hash":"fc66e6506465955825541ac4c4bd9a405b534f60","modified":1544790298403},{"_id":"public/2017/02/25/server-framework/index.html","hash":"2dfaf392141fc7d862753f44ac5ee971aaa57657","modified":1544790298403},{"_id":"public/2017/02/21/singleton/index.html","hash":"390cc0f86f1791d565f08f76e90c4b224b4f8d37","modified":1544790298403},{"_id":"public/2017/02/21/macro/index.html","hash":"c606e13b9877c50000c68c6063f9d7e7ac7437af","modified":1544790298403},{"_id":"public/2017/02/15/linux-attack-cmd/index.html","hash":"e52381e303cac529f4e75df9ead6e69136719c6e","modified":1544790298404},{"_id":"public/2017/02/14/yr-rules-scan-proc/index.html","hash":"524bd50bf552d98e167ec1c4e407e712868c8a20","modified":1544790298404},{"_id":"public/2017/02/14/svm/index.html","hash":"675630d7beb0a13ea009a0d570ea13c7d0156574","modified":1544790298404},{"_id":"public/2017/02/08/auto-bak-hexo-blog/index.html","hash":"5eed60bdee8c2d9b97f762e2df10b85a27c2c55b","modified":1544790739603},{"_id":"public/2017/02/07/static-class-func-var/index.html","hash":"47940fc2c0707a4008e861199e48593198636e9f","modified":1544790298404},{"_id":"public/2017/02/06/dns/index.html","hash":"f17553728e4ae134f44348028de644d5c9e9aca8","modified":1544790298404},{"_id":"public/archives/index.html","hash":"a150964d1f2ac7c8a6264d0e3a4d8c0b8ec3462c","modified":1544790298404},{"_id":"public/archives/page/2/index.html","hash":"c794cbbccf757d7e5318c57030f5681c92b34c01","modified":1544790298404},{"_id":"public/archives/2017/index.html","hash":"c50372f9c692a6455f5257de7b7fc13512be5759","modified":1544790298404},{"_id":"public/archives/2017/page/2/index.html","hash":"16bf821f9231b9bd3d69875067e6a31fbefdc49b","modified":1544790298404},{"_id":"public/archives/2017/02/index.html","hash":"53df51c051672138c933506874778a379d56c5a0","modified":1544790298404},{"_id":"public/archives/2017/05/index.html","hash":"3572d89dde5525618e338455528a85703b56695a","modified":1544790298404},{"_id":"public/archives/2017/07/index.html","hash":"3db0517ba248dc085d3319e853f788078e6fda77","modified":1544790298404},{"_id":"public/archives/2017/08/index.html","hash":"f77a5763f07557a057c0aead31e259a02c07abfc","modified":1544790298404},{"_id":"public/archives/2017/09/index.html","hash":"c7041188c5d15888dd1be1eff0c35e6d76f6c6e1","modified":1544790298405},{"_id":"public/archives/2018/index.html","hash":"d7eff3daa3be7fd76faff12eaed44802ca7de114","modified":1544790298405},{"_id":"public/archives/2018/12/index.html","hash":"8f20cbcee397e80c9cc69c7bac507b19fb4f1f8d","modified":1544790298405},{"_id":"public/categories/hexo/index.html","hash":"31962bcfb844c71d6390c901ce2d7a5829d40158","modified":1544790298405},{"_id":"public/categories/cpp/index.html","hash":"29fff2ff36b3b76f50e2c64a28bc74152c09125a","modified":1544790298405},{"_id":"public/categories/network/index.html","hash":"f10f752f8751e0e243fd9055d55bd26698fb4321","modified":1544790298405},{"_id":"public/categories/linux/index.html","hash":"75ad8fb0e53005fe4a26804a2d934dd3361505c8","modified":1544790298405},{"_id":"public/categories/c/index.html","hash":"b7d729a7d30f2299299a6fed969e78d56c0e8058","modified":1544790298405},{"_id":"public/categories/设计模式/index.html","hash":"e883b094467c8ceb3d64cbb659b659b09c5fa0b7","modified":1544790298405},{"_id":"public/categories/svr-framework/index.html","hash":"bf4909b2b39afbd90cd6686b9bb5e98718864b4c","modified":1544790298405},{"_id":"public/categories/ps/index.html","hash":"0b3c818941c711ad5b6da627a08b304e30ab3efb","modified":1544790298405},{"_id":"public/categories/machine-learning/index.html","hash":"1dddbac4aa1843164aebb669feaf5559941347bd","modified":1544790298406},{"_id":"public/index.html","hash":"82e1bb26fb866d9ada1accbc100e0f63a16c74ad","modified":1544790298406},{"_id":"public/page/2/index.html","hash":"694bc5948a742d1efc6d4d5317fe230183be9e91","modified":1544790298406},{"_id":"public/tags/hexo/index.html","hash":"2a50fd517725f09e28d71186290d625921f6c49f","modified":1544790298406},{"_id":"public/tags/C/index.html","hash":"1cb27a725e6013a17c8538a1fc3da00b5db949ea","modified":1544790298406},{"_id":"public/tags/c/index.html","hash":"ac7aecb9b897f076438ebbcf57b5672c69db8552","modified":1544790298406},{"_id":"public/tags/cpp/index.html","hash":"a8afd29813ee16265ec960e16e716c0e620af0ed","modified":1544790298406},{"_id":"public/tags/dns/index.html","hash":"bbd8b3c545f5280f116918dfdd8e73b12a752dd5","modified":1544790298406},{"_id":"public/tags/domain/index.html","hash":"de431bf0851b51ff244845f78f79937c10a05aea","modified":1544790298407},{"_id":"public/tags/linux/index.html","hash":"6fe6bf0cb72b4584e323417a64a7072a1c833d18","modified":1544790298407},{"_id":"public/tags/shell/index.html","hash":"a6693a016e19fd4baabfbd59cfa854a501c51a5f","modified":1544790298407},{"_id":"public/tags/attack/index.html","hash":"b4ef57ccb31d853748371f17713f854b58ee981b","modified":1544790298407},{"_id":"public/tags/macro/index.html","hash":"b8007555c4f414afc47808c499b6696b4b6f5df2","modified":1544790298407},{"_id":"public/tags/设计模式/index.html","hash":"ead0a0f5d4081673c0832f56e480fa1a2ec48a07","modified":1544790298407},{"_id":"public/tags/李建中/index.html","hash":"e605a7192fd867d2d4f247e7ac18f3890d8a03ad","modified":1544790298407},{"_id":"public/tags/server/index.html","hash":"f21e693328356618c6196279ebe87d2e65794c67","modified":1544790298407},{"_id":"public/tags/framework/index.html","hash":"19e1c5989441ed50f86b64bb8cf288489a822f05","modified":1544790298407},{"_id":"public/tags/ps/index.html","hash":"23cb0c3ff83895926b439c839fc761778d718619","modified":1544790298407},{"_id":"public/tags/sharpen/index.html","hash":"4212670442039117d4bcb391359ad562a2b11703","modified":1544790298407},{"_id":"public/tags/单例模式/index.html","hash":"8fb8250307c8526222e5ebec90ada146972aa88a","modified":1544790298407},{"_id":"public/tags/java/index.html","hash":"69cde7257b722113cad71bcc7ece84227c642a5a","modified":1544790298408},{"_id":"public/tags/static/index.html","hash":"8d8732f46217f8dabe55e7e4ee930c913152a970","modified":1544790298408},{"_id":"public/tags/svm/index.html","hash":"5ab3f01b7188dc4763903925175ee3600808ef83","modified":1544790298408},{"_id":"public/tags/math/index.html","hash":"ca6c34be504826de959d7c23e50c8fcbeeffad50","modified":1544790298408},{"_id":"public/tags/machine-learning/index.html","hash":"caf826ae9e1903e1184b86fc8c4b6461257eb25f","modified":1544790298408},{"_id":"public/tags/yara/index.html","hash":"81a2e439ce323cebfc6d954715beeb62d57cca1d","modified":1544790298408},{"_id":"public/tags/proc/index.html","hash":"196b13ba62f381a4755b891e6ef8251640f8540e","modified":1544790298408},{"_id":"public/tags/api/index.html","hash":"c86cb42a086e51594c55d1992d24cf8d0d358f38","modified":1544790298408},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1544790298420},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1544790298420},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1544790298420},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1544790298420},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1544790298420},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1544790298420},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1544790298420},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1544790298420},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1544790298421},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1544790298421},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1544790298421},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1544790298421},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1544790298421},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1544790298421},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1544790298421},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1544790298422},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1544790298422},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1544790298422},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1544790298422},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1544790298422},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1544790298422},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1544790298422},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1544790298422},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1544790298422},{"_id":"public/2017/07/15/cpp-type/Selection_003.png","hash":"e2d1e23953bcb6344b9038369823bed5ae487fe0","modified":1544790298422},{"_id":"public/2017/07/15/cpp-type/Selection_002.png","hash":"767d6f5f196d09a3bdc79661b68ed5606440a331","modified":1544790298422},{"_id":"public/images/me.png","hash":"bfdd5fa115be9e53a5105f02f33b08a1d9540d84","modified":1544790298715},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1544790298719},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1544790298720},{"_id":"public/2017/07/15/cpp-type/Selection_001.png","hash":"b6a65ee9dff5045520415250977ff5c8025e2037","modified":1544790298720},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1544790298727},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1544790298727},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1544790298728},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1544790298728},{"_id":"public/js/src/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1544790298728},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1544790298728},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1544790298728},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1544790298728},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1544790298729},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1544790298729},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1544790298729},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1544790298729},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1544790298729},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1544790298729},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1544790298729},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1544790298729},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1544790298729},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1544790298729},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1544790298729},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1544790298729},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1544790298729},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1544790298729},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1544790298730},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1544790298730},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1544790298730},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1544790298730},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1544790298730},{"_id":"public/css/main.css","hash":"ece49e56da53faeb92a2cc0ec86fbf53592772ce","modified":1544790298730},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1544790298730},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1544790298730},{"_id":"public/2017/02/06/dns/abc0000000001.png","hash":"38e2648ce22631ff411f368c825a0c9c357983ef","modified":1544790298730},{"_id":"public/2017/02/21/singleton/abc0000000007.png","hash":"aa742c1358fccadb40b00dfea93a0a587f5e49af","modified":1544790298730},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1544790298736},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1544790298736},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1544790298736},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1544790298736},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1544790298741},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1544790298741},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1544790298746},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1544790298746},{"_id":"public/2017/02/06/dns/abc0000000003.png","hash":"618dc843c235e3b7c317bc99c88048ef361bab43","modified":1544790298746},{"_id":"public/2017/02/06/dns/abc0000000004.png","hash":"5368d43a2c54a51e036f383f306f08625000b96b","modified":1544790298746},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1544790298753},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1544790298753},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1544790298753},{"_id":"public/2017/02/14/yr-rules-scan-proc/abc0000000006.png","hash":"66729ea5e1743e29193cd4d855fad16e9f3e4412","modified":1544790298754},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1544790298761},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1544790298761},{"_id":"public/2017/02/06/dns/abc0000000000.png","hash":"2b8cb958634390187577c5a4cef8f385d989e910","modified":1544790298762},{"_id":"public/2017/02/06/dns/abc0000000002.png","hash":"5a56f151e6035917c79b59e8643acfb4532e104a","modified":1544790298769},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1544790298781},{"_id":"public/2017/02/06/dns/abc0000000005.png","hash":"6bd162635d39bf35bec095e5a6bea0b7f07a5ba6","modified":1544790298784},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1544790298786},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1544790298796}],"Category":[{"name":"hexo","_id":"cjpo07s5p0003ilog472urd0w"},{"name":"cpp","_id":"cjpo07s5t0008ilogy69nsmlq"},{"name":"network","_id":"cjpo07s64000pilogz9iqr1of"},{"name":"linux","_id":"cjpo07s69000wilog59xhda99"},{"name":"c","_id":"cjpo07s6a0011ilog0w9p0hr9"},{"name":"设计模式","_id":"cjpo07s6d0018ilogh46tfe0n"},{"name":"svr_framework","_id":"cjpo07s6f001diloguqxzocvv"},{"name":"ps","_id":"cjpo07s6f001gilogakqz2td7"},{"name":"c++","_id":"cjpo07s6h001tilogjwouoatr"},{"name":"machine learning","_id":"cjpo07s6i001yilog2w3wyp25"}],"Data":[],"Page":[{"title":"categories","date":"2017-02-07T13:40:50.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-02-07 21:40:50\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-12-14T12:22:59.216Z","path":"categories/index.html","layout":"page","_id":"cjpo07s5n0001ilogq8qi2g7d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"giter","date":"2017-02-09T08:45:07.000Z","mathjax":true,"_content":"","source":"giter/index.md","raw":"---\ntitle: giter\ndate: 2017-02-09 16:45:07\nmathjax: true\n---\n","updated":"2018-12-14T12:22:59.216Z","path":"giter/index.html","comments":1,"layout":"page","_id":"cjpo07s9b003cilogsef4026r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-02-07T13:39:48.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-07 21:39:48\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-12-14T12:22:59.216Z","path":"tags/index.html","layout":"page","_id":"cjpo07s9c003dilog1goeh2c9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo 博客源文件备份与恢复","date":"2017-02-08T12:06:25.000Z","_content":"　　本文记录了两部分：hexo博客系统发布新文章时，自动备份托管到github；根据github上托管的项目，能够将最新的数据恢复到本地。自动备份详细技术原理可参考[文章](http://igeek.wang/2016/09/01/automatic-backup/#more)。\n\n<!-- more -->\n\n### 备份Hexo博客源文件\n* Github上新创建一个空的repo，取名hexo-next-blog用于远程仓库备份；进入本地博客源码的hexo文件夹，创建本地仓库：\n```sh\ngit init\n```\n\n* 设置远程仓库地址，并更新数据(第一次远程空仓库，无数据更新)：\n```sh\ngit remote add origin git@github:XXX/hexo-next-blog.git\ngit pull origin master\n```\n\n* 修改.gitignore文件，加入*.log, public/ 以及 deploy*/;\n* 本地提交Hexo源码：\n```sh\ngit add .\ngit commit -m \"hexo next blog数据备份\"\n```\n\n* 本地仓库数据推送github仓库:\n```sh\ngit push origin master\n```\n\n### 恢复Hexo博客源文件\n　　切换电脑后，安装node，git环境，配置github sshkey。\n　　创建空目录hexo为工作目录，clone github上的repo：\n```sh\ngit clone git@github.com:xxx/hexo-next-blog.git\n```\n　　git clone成功后，安装hexo环境:\n```sh\nnpm install hexo\nnpm install -g hexo-cli\nnpm install hexo-server --save    # hexo s\nnpm install                       # 注意 hexo-next-blog/source/_posts目录下npm install，否则会出现404\nnpm install hexo-deployer-git\nnpm install --save shelljs   # 使用hexo d写文章时，自动备份时用\n```\n\n另外，themes/next主题文件夹下的数据不会备份，若需备份，可删除该文件夹下的.git目录等信息再加入备份。\n","source":"_posts/auto-bak-hexo-blog.md","raw":"---\ntitle: Hexo 博客源文件备份与恢复\ndate: 2017-02-08 20:06:25\ntags: hexo\ncategories: hexo\n---\n　　本文记录了两部分：hexo博客系统发布新文章时，自动备份托管到github；根据github上托管的项目，能够将最新的数据恢复到本地。自动备份详细技术原理可参考[文章](http://igeek.wang/2016/09/01/automatic-backup/#more)。\n\n<!-- more -->\n\n### 备份Hexo博客源文件\n* Github上新创建一个空的repo，取名hexo-next-blog用于远程仓库备份；进入本地博客源码的hexo文件夹，创建本地仓库：\n```sh\ngit init\n```\n\n* 设置远程仓库地址，并更新数据(第一次远程空仓库，无数据更新)：\n```sh\ngit remote add origin git@github:XXX/hexo-next-blog.git\ngit pull origin master\n```\n\n* 修改.gitignore文件，加入*.log, public/ 以及 deploy*/;\n* 本地提交Hexo源码：\n```sh\ngit add .\ngit commit -m \"hexo next blog数据备份\"\n```\n\n* 本地仓库数据推送github仓库:\n```sh\ngit push origin master\n```\n\n### 恢复Hexo博客源文件\n　　切换电脑后，安装node，git环境，配置github sshkey。\n　　创建空目录hexo为工作目录，clone github上的repo：\n```sh\ngit clone git@github.com:xxx/hexo-next-blog.git\n```\n　　git clone成功后，安装hexo环境:\n```sh\nnpm install hexo\nnpm install -g hexo-cli\nnpm install hexo-server --save    # hexo s\nnpm install                       # 注意 hexo-next-blog/source/_posts目录下npm install，否则会出现404\nnpm install hexo-deployer-git\nnpm install --save shelljs   # 使用hexo d写文章时，自动备份时用\n```\n\n另外，themes/next主题文件夹下的数据不会备份，若需备份，可删除该文件夹下的.git目录等信息再加入备份。\n","slug":"auto-bak-hexo-blog","published":1,"updated":"2018-12-14T12:30:59.056Z","_id":"cjpo07s5k0000ilogvg78pm3g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>　　本文记录了两部分：hexo博客系统发布新文章时，自动备份托管到github；根据github上托管的项目，能够将最新的数据恢复到本地。自动备份详细技术原理可参考<a href=\"http://igeek.wang/2016/09/01/automatic-backup/#more\" target=\"_blank\" rel=\"noopener\">文章</a>。</p>\n<a id=\"more\"></a>\n<h3 id=\"备份Hexo博客源文件\"><a href=\"#备份Hexo博客源文件\" class=\"headerlink\" title=\"备份Hexo博客源文件\"></a>备份Hexo博客源文件</h3><ul>\n<li><p>Github上新创建一个空的repo，取名hexo-next-blog用于远程仓库备份；进入本地博客源码的hexo文件夹，创建本地仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置远程仓库地址，并更新数据(第一次远程空仓库，无数据更新)：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github:XXX/hexo-next-blog.git</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改.gitignore文件，加入<em>.log, public/ 以及 deploy</em>/;</p>\n</li>\n<li><p>本地提交Hexo源码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"hexo next blog数据备份\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地仓库数据推送github仓库:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"恢复Hexo博客源文件\"><a href=\"#恢复Hexo博客源文件\" class=\"headerlink\" title=\"恢复Hexo博客源文件\"></a>恢复Hexo博客源文件</h3><p>　　切换电脑后，安装node，git环境，配置github sshkey。<br>　　创建空目录hexo为工作目录，clone github上的repo：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:xxx/hexo-next-blog.git</span><br></pre></td></tr></table></figure></p>\n<p>　　git clone成功后，安装hexo环境:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">npm install hexo-server --save    <span class=\"comment\"># hexo s</span></span><br><span class=\"line\">npm install                       <span class=\"comment\"># 注意 hexo-next-blog/source/_posts目录下npm install，否则会出现404</span></span><br><span class=\"line\">npm install hexo-deployer-git</span><br><span class=\"line\">npm install --save shelljs   <span class=\"comment\"># 使用hexo d写文章时，自动备份时用</span></span><br></pre></td></tr></table></figure></p>\n<p>另外，themes/next主题文件夹下的数据不会备份，若需备份，可删除该文件夹下的.git目录等信息再加入备份。</p>\n","site":{"data":{}},"excerpt":"<p>　　本文记录了两部分：hexo博客系统发布新文章时，自动备份托管到github；根据github上托管的项目，能够将最新的数据恢复到本地。自动备份详细技术原理可参考<a href=\"http://igeek.wang/2016/09/01/automatic-backup/#more\" target=\"_blank\" rel=\"noopener\">文章</a>。</p>","more":"<h3 id=\"备份Hexo博客源文件\"><a href=\"#备份Hexo博客源文件\" class=\"headerlink\" title=\"备份Hexo博客源文件\"></a>备份Hexo博客源文件</h3><ul>\n<li><p>Github上新创建一个空的repo，取名hexo-next-blog用于远程仓库备份；进入本地博客源码的hexo文件夹，创建本地仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置远程仓库地址，并更新数据(第一次远程空仓库，无数据更新)：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github:XXX/hexo-next-blog.git</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改.gitignore文件，加入<em>.log, public/ 以及 deploy</em>/;</p>\n</li>\n<li><p>本地提交Hexo源码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"hexo next blog数据备份\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地仓库数据推送github仓库:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"恢复Hexo博客源文件\"><a href=\"#恢复Hexo博客源文件\" class=\"headerlink\" title=\"恢复Hexo博客源文件\"></a>恢复Hexo博客源文件</h3><p>　　切换电脑后，安装node，git环境，配置github sshkey。<br>　　创建空目录hexo为工作目录，clone github上的repo：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:xxx/hexo-next-blog.git</span><br></pre></td></tr></table></figure></p>\n<p>　　git clone成功后，安装hexo环境:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">npm install hexo-server --save    <span class=\"comment\"># hexo s</span></span><br><span class=\"line\">npm install                       <span class=\"comment\"># 注意 hexo-next-blog/source/_posts目录下npm install，否则会出现404</span></span><br><span class=\"line\">npm install hexo-deployer-git</span><br><span class=\"line\">npm install --save shelljs   <span class=\"comment\"># 使用hexo d写文章时，自动备份时用</span></span><br></pre></td></tr></table></figure></p>\n<p>另外，themes/next主题文件夹下的数据不会备份，若需备份，可删除该文件夹下的.git目录等信息再加入备份。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:30:59 GMT+0800 (China Standard Time)","title":"Hexo 博客源文件备份与恢复","path":"2017/02/08/auto-bak-hexo-blog/","eyeCatchImage":null,"excerpt":"<p>　　本文记录了两部分：hexo博客系统发布新文章时，自动备份托管到github；根据github上托管的项目，能够将最新的数据恢复到本地。自动备份详细技术原理可参考<a href=\"http://igeek.wang/2016/09/01/automatic-backup/#more\" target=\"_blank\" rel=\"noopener\">文章</a>。</p>","date":"2017-02-08T12:06:25.000Z","pv":0,"totalPV":0,"categories":"hexo","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"C++对C的扩展","date":"2017-07-16T02:51:55.000Z","_content":"C++在C的基础上进行了扩展，如扩展了bool类型，表达式可以被赋值等等\n<!--more -->\n#### 扩展了bool类型等\nC语言中表示真假用非0与0，而C++中扩展使用true与false，实际上的bool类型是一个枚举变量，如下：\n```C++\n#include <iostream>\nusing namespace std;\nenum BOOL\n{   \n    FALSE,TRUE\n};\nint main()\n{\n    bool b = false;\n    BOOL bb = FALSE;\n    cout<<\"b:\"<<b<<\",bb:\"<<bb<<endl;\n    cout<<\"sizeof(b):\"<<sizeof(b)<<\",sizeof(bb):\"<<sizeof(bb)<<endl;\n    return 0;\n}\n\n// 结果如下：\nb:0,bb:0\nsizeof(b):1,sizeof(bb):4\n\n```\n\n#### 一些表达式可以被赋值\nC++的表达式可以赋值，是因为运算符重载的缘故，如++i，重载++运算符，return \\*this， 可以继续赋值。注意：此处i++不可当做左值，因为 return int。\n```C++\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int a, b=5;\n    (a=b) = 10;    // C语言中编译不通过\n    cout<<\"a:\"<<a<<\",b=\"<<b<<endl;\n    (a!=b? a:b) = 1000;              // C语言中编译不通过\n    cout<<\"a:\"<<a<<\",b=\"<<b<<endl;\n\n    int i = 0;\n    ++i = 10;      // C语言中编译不通过\n    cout<<\"i:\"<<i<<endl;\n    return 0;\n}\n\n//结果：\na:10,b=5\na:1000,b=5\ni:10\n```\n如果在使用C语言编译上述表达式，则会出现：\n```C\ntest.c: In function ‘main’:\ntest.c:5:11: error: lvalue required as left operand of assignment\n     (a=b) = 10;\n           ^\ntest.c:6:17: error: lvalue required as left operand of assignment\n     (a!=b? a:b) = 1000;\n                 ^\ntest.c:9:9: error: lvalue required as left operand of assignment\n     ++i = 10;\n         ^\n```\n","source":"_posts/cpp-extension-1.md","raw":"---\ntitle: C++对C的扩展\ndate: 2017-07-16 10:51:55\ntags: C++\ncategories: cpp\n---\nC++在C的基础上进行了扩展，如扩展了bool类型，表达式可以被赋值等等\n<!--more -->\n#### 扩展了bool类型等\nC语言中表示真假用非0与0，而C++中扩展使用true与false，实际上的bool类型是一个枚举变量，如下：\n```C++\n#include <iostream>\nusing namespace std;\nenum BOOL\n{   \n    FALSE,TRUE\n};\nint main()\n{\n    bool b = false;\n    BOOL bb = FALSE;\n    cout<<\"b:\"<<b<<\",bb:\"<<bb<<endl;\n    cout<<\"sizeof(b):\"<<sizeof(b)<<\",sizeof(bb):\"<<sizeof(bb)<<endl;\n    return 0;\n}\n\n// 结果如下：\nb:0,bb:0\nsizeof(b):1,sizeof(bb):4\n\n```\n\n#### 一些表达式可以被赋值\nC++的表达式可以赋值，是因为运算符重载的缘故，如++i，重载++运算符，return \\*this， 可以继续赋值。注意：此处i++不可当做左值，因为 return int。\n```C++\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int a, b=5;\n    (a=b) = 10;    // C语言中编译不通过\n    cout<<\"a:\"<<a<<\",b=\"<<b<<endl;\n    (a!=b? a:b) = 1000;              // C语言中编译不通过\n    cout<<\"a:\"<<a<<\",b=\"<<b<<endl;\n\n    int i = 0;\n    ++i = 10;      // C语言中编译不通过\n    cout<<\"i:\"<<i<<endl;\n    return 0;\n}\n\n//结果：\na:10,b=5\na:1000,b=5\ni:10\n```\n如果在使用C语言编译上述表达式，则会出现：\n```C\ntest.c: In function ‘main’:\ntest.c:5:11: error: lvalue required as left operand of assignment\n     (a=b) = 10;\n           ^\ntest.c:6:17: error: lvalue required as left operand of assignment\n     (a!=b? a:b) = 1000;\n                 ^\ntest.c:9:9: error: lvalue required as left operand of assignment\n     ++i = 10;\n         ^\n```\n","slug":"cpp-extension-1","published":1,"updated":"2018-12-14T12:22:59.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s5n0002ilog04ar618x","content":"<p>C++在C的基础上进行了扩展，如扩展了bool类型，表达式可以被赋值等等<br><a id=\"more\"></a></p>\n<h4 id=\"扩展了bool类型等\"><a href=\"#扩展了bool类型等\" class=\"headerlink\" title=\"扩展了bool类型等\"></a>扩展了bool类型等</h4><p>C语言中表示真假用非0与0，而C++中扩展使用true与false，实际上的bool类型是一个枚举变量，如下：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">enum</span> BOOL</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    FALSE,TRUE</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> b = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    BOOL bb = FALSE;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:\"</span>&lt;&lt;b&lt;&lt;<span class=\"string\">\",bb:\"</span>&lt;&lt;bb&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"sizeof(b):\"</span>&lt;&lt;<span class=\"keyword\">sizeof</span>(b)&lt;&lt;<span class=\"string\">\",sizeof(bb):\"</span>&lt;&lt;<span class=\"keyword\">sizeof</span>(bb)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果如下：</span></span><br><span class=\"line\">b:<span class=\"number\">0</span>,bb:<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(b):<span class=\"number\">1</span>,<span class=\"keyword\">sizeof</span>(bb):<span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"一些表达式可以被赋值\"><a href=\"#一些表达式可以被赋值\" class=\"headerlink\" title=\"一些表达式可以被赋值\"></a>一些表达式可以被赋值</h4><p>C++的表达式可以赋值，是因为运算符重载的缘故，如++i，重载++运算符，return *this， 可以继续赋值。注意：此处i++不可当做左值，因为 return int。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b=<span class=\"number\">5</span>;</span><br><span class=\"line\">    (a=b) = <span class=\"number\">10</span>;    <span class=\"comment\">// C语言中编译不通过</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:\"</span>&lt;&lt;a&lt;&lt;<span class=\"string\">\",b=\"</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    (a!=b? a:b) = <span class=\"number\">1000</span>;              <span class=\"comment\">// C语言中编译不通过</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:\"</span>&lt;&lt;a&lt;&lt;<span class=\"string\">\",b=\"</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ++i = <span class=\"number\">10</span>;      <span class=\"comment\">// C语言中编译不通过</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"i:\"</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\">a:<span class=\"number\">10</span>,b=<span class=\"number\">5</span></span><br><span class=\"line\">a:<span class=\"number\">1000</span>,b=<span class=\"number\">5</span></span><br><span class=\"line\">i:<span class=\"number\">10</span></span><br></pre></td></tr></table></figure></p>\n<p>如果在使用C语言编译上述表达式，则会出现：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test.c: In function ‘main’:</span><br><span class=\"line\">test.c:<span class=\"number\">5</span>:<span class=\"number\">11</span>: error: lvalue required as left operand of assignment</span><br><span class=\"line\">     (a=b) = <span class=\"number\">10</span>;</span><br><span class=\"line\">           ^</span><br><span class=\"line\">test.c:<span class=\"number\">6</span>:<span class=\"number\">17</span>: error: lvalue required as left operand of assignment</span><br><span class=\"line\">     (a!=b? a:b) = <span class=\"number\">1000</span>;</span><br><span class=\"line\">                 ^</span><br><span class=\"line\">test.c:<span class=\"number\">9</span>:<span class=\"number\">9</span>: error: lvalue required as left operand of assignment</span><br><span class=\"line\">     ++i = <span class=\"number\">10</span>;</span><br><span class=\"line\">         ^</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>C++在C的基础上进行了扩展，如扩展了bool类型，表达式可以被赋值等等<br></p>","more":"<p></p>\n<h4 id=\"扩展了bool类型等\"><a href=\"#扩展了bool类型等\" class=\"headerlink\" title=\"扩展了bool类型等\"></a>扩展了bool类型等</h4><p>C语言中表示真假用非0与0，而C++中扩展使用true与false，实际上的bool类型是一个枚举变量，如下：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">enum</span> BOOL</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    FALSE,TRUE</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> b = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    BOOL bb = FALSE;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:\"</span>&lt;&lt;b&lt;&lt;<span class=\"string\">\",bb:\"</span>&lt;&lt;bb&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"sizeof(b):\"</span>&lt;&lt;<span class=\"keyword\">sizeof</span>(b)&lt;&lt;<span class=\"string\">\",sizeof(bb):\"</span>&lt;&lt;<span class=\"keyword\">sizeof</span>(bb)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果如下：</span></span><br><span class=\"line\">b:<span class=\"number\">0</span>,bb:<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(b):<span class=\"number\">1</span>,<span class=\"keyword\">sizeof</span>(bb):<span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"一些表达式可以被赋值\"><a href=\"#一些表达式可以被赋值\" class=\"headerlink\" title=\"一些表达式可以被赋值\"></a>一些表达式可以被赋值</h4><p>C++的表达式可以赋值，是因为运算符重载的缘故，如++i，重载++运算符，return *this， 可以继续赋值。注意：此处i++不可当做左值，因为 return int。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b=<span class=\"number\">5</span>;</span><br><span class=\"line\">    (a=b) = <span class=\"number\">10</span>;    <span class=\"comment\">// C语言中编译不通过</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:\"</span>&lt;&lt;a&lt;&lt;<span class=\"string\">\",b=\"</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    (a!=b? a:b) = <span class=\"number\">1000</span>;              <span class=\"comment\">// C语言中编译不通过</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:\"</span>&lt;&lt;a&lt;&lt;<span class=\"string\">\",b=\"</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ++i = <span class=\"number\">10</span>;      <span class=\"comment\">// C语言中编译不通过</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"i:\"</span>&lt;&lt;i&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\">a:<span class=\"number\">10</span>,b=<span class=\"number\">5</span></span><br><span class=\"line\">a:<span class=\"number\">1000</span>,b=<span class=\"number\">5</span></span><br><span class=\"line\">i:<span class=\"number\">10</span></span><br></pre></td></tr></table></figure></p>\n<p>如果在使用C语言编译上述表达式，则会出现：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test.c: In function ‘main’:</span><br><span class=\"line\">test.c:<span class=\"number\">5</span>:<span class=\"number\">11</span>: error: lvalue required as left operand of assignment</span><br><span class=\"line\">     (a=b) = <span class=\"number\">10</span>;</span><br><span class=\"line\">           ^</span><br><span class=\"line\">test.c:<span class=\"number\">6</span>:<span class=\"number\">17</span>: error: lvalue required as left operand of assignment</span><br><span class=\"line\">     (a!=b? a:b) = <span class=\"number\">1000</span>;</span><br><span class=\"line\">                 ^</span><br><span class=\"line\">test.c:<span class=\"number\">9</span>:<span class=\"number\">9</span>: error: lvalue required as left operand of assignment</span><br><span class=\"line\">     ++i = <span class=\"number\">10</span>;</span><br><span class=\"line\">         ^</span><br></pre></td></tr></table></figure></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"C++对C的扩展","path":"2017/07/16/cpp-extension-1/","eyeCatchImage":null,"excerpt":"<p>C++在C的基础上进行了扩展，如扩展了bool类型，表达式可以被赋值等等<br></p>","date":"2017-07-16T02:51:55.000Z","pv":0,"totalPV":0,"categories":"cpp","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"C++类型安全增强","date":"2017-07-15T05:36:48.000Z","_content":"\nC++相对于C语言而已，是一种强类型语言，类型检查更严格。\n<!-- more -->\n#### 严格的类型检查\n如，C语言中，可以使用一些“技巧”来更改常量的值，如下代码可直接运行：\n```C\n#include <stdio.h>\nint main()\n{\n    const int a ;          // C语言可不初始化，定义后也不允许赋值\n    printf(\"before. a:%d\\n\", a);\n    int *p = &a;          // C语言，左右两边类型不同，允许编译通过\n    *p = 10;              // 可赋值  \n    printf(\"after. a:%d\\n\", a);\n    return 0;\n}\n```\n![hosts](cpp_type/Selection_002.png)\n\n而在C++中，则不允许，强类型检查就会让编译都不通过：\n![](cpp_type/Selection_001.png)\n\n#### 真正的枚举\nC语言中，可以对枚举变量进行任意赋值，而C++中，只能用枚举的元素进行赋值。\n```C++\nenum SEASON\n{\n    Spr = 1,\n    Sum,Autu,Win\n};\n\nint main()\n{\n    SEASON s;\n    cout<<s<<endl;\n    s = Spr;         // C++中正确赋值\n    cout<<s<<endl;\n    s = 1;           // C++中赋值编译报错\n    cout<<s<<endl;\n    return 0;\n}\n```\n![](cpp_type/Selection_003.png)\n","source":"_posts/cpp-type.md","raw":"---\ntitle: C++类型安全增强\ndate: 2017-07-15 13:36:48\ntags: c++\ncategories: cpp\n---\n\nC++相对于C语言而已，是一种强类型语言，类型检查更严格。\n<!-- more -->\n#### 严格的类型检查\n如，C语言中，可以使用一些“技巧”来更改常量的值，如下代码可直接运行：\n```C\n#include <stdio.h>\nint main()\n{\n    const int a ;          // C语言可不初始化，定义后也不允许赋值\n    printf(\"before. a:%d\\n\", a);\n    int *p = &a;          // C语言，左右两边类型不同，允许编译通过\n    *p = 10;              // 可赋值  \n    printf(\"after. a:%d\\n\", a);\n    return 0;\n}\n```\n![hosts](cpp_type/Selection_002.png)\n\n而在C++中，则不允许，强类型检查就会让编译都不通过：\n![](cpp_type/Selection_001.png)\n\n#### 真正的枚举\nC语言中，可以对枚举变量进行任意赋值，而C++中，只能用枚举的元素进行赋值。\n```C++\nenum SEASON\n{\n    Spr = 1,\n    Sum,Autu,Win\n};\n\nint main()\n{\n    SEASON s;\n    cout<<s<<endl;\n    s = Spr;         // C++中正确赋值\n    cout<<s<<endl;\n    s = 1;           // C++中赋值编译报错\n    cout<<s<<endl;\n    return 0;\n}\n```\n![](cpp_type/Selection_003.png)\n","slug":"cpp-type","published":1,"updated":"2018-12-14T12:22:59.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s5q0005ilogymnn7xg4","content":"<p>C++相对于C语言而已，是一种强类型语言，类型检查更严格。<br><a id=\"more\"></a></p>\n<h4 id=\"严格的类型检查\"><a href=\"#严格的类型检查\" class=\"headerlink\" title=\"严格的类型检查\"></a>严格的类型检查</h4><p>如，C语言中，可以使用一些“技巧”来更改常量的值，如下代码可直接运行：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a ;          <span class=\"comment\">// C语言可不初始化，定义后也不允许赋值</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"before. a:%d\\n\"</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p = &amp;a;          <span class=\"comment\">// C语言，左右两边类型不同，允许编译通过</span></span><br><span class=\"line\">    *p = <span class=\"number\">10</span>;              <span class=\"comment\">// 可赋值  </span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"after. a:%d\\n\"</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/15/cpp-type/Selection_002.png\" alt=\"hosts\"></p>\n<p>而在C++中，则不允许，强类型检查就会让编译都不通过：<br><img src=\"/2017/07/15/cpp-type/Selection_001.png\" alt=\"\"></p>\n<h4 id=\"真正的枚举\"><a href=\"#真正的枚举\" class=\"headerlink\" title=\"真正的枚举\"></a>真正的枚举</h4><p>C语言中，可以对枚举变量进行任意赋值，而C++中，只能用枚举的元素进行赋值。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> SEASON</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Spr = <span class=\"number\">1</span>,</span><br><span class=\"line\">    Sum,Autu,Win</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    SEASON s;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;s&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    s = Spr;         <span class=\"comment\">// C++中正确赋值</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;s&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    s = <span class=\"number\">1</span>;           <span class=\"comment\">// C++中赋值编译报错</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;s&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/15/cpp-type/Selection_003.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>C++相对于C语言而已，是一种强类型语言，类型检查更严格。<br></p>","more":"<p></p>\n<h4 id=\"严格的类型检查\"><a href=\"#严格的类型检查\" class=\"headerlink\" title=\"严格的类型检查\"></a>严格的类型检查</h4><p>如，C语言中，可以使用一些“技巧”来更改常量的值，如下代码可直接运行：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a ;          <span class=\"comment\">// C语言可不初始化，定义后也不允许赋值</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"before. a:%d\\n\"</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p = &amp;a;          <span class=\"comment\">// C语言，左右两边类型不同，允许编译通过</span></span><br><span class=\"line\">    *p = <span class=\"number\">10</span>;              <span class=\"comment\">// 可赋值  </span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"after. a:%d\\n\"</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/15/cpp-type/Selection_002.png\" alt=\"hosts\"></p>\n<p>而在C++中，则不允许，强类型检查就会让编译都不通过：<br><img src=\"/2017/07/15/cpp-type/Selection_001.png\" alt=\"\"></p>\n<h4 id=\"真正的枚举\"><a href=\"#真正的枚举\" class=\"headerlink\" title=\"真正的枚举\"></a>真正的枚举</h4><p>C语言中，可以对枚举变量进行任意赋值，而C++中，只能用枚举的元素进行赋值。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> SEASON</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Spr = <span class=\"number\">1</span>,</span><br><span class=\"line\">    Sum,Autu,Win</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    SEASON s;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;s&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    s = Spr;         <span class=\"comment\">// C++中正确赋值</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;s&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    s = <span class=\"number\">1</span>;           <span class=\"comment\">// C++中赋值编译报错</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;s&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/07/15/cpp-type/Selection_003.png\" alt=\"\"></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"C++类型安全增强","path":"2017/07/15/cpp-type/","eyeCatchImage":null,"excerpt":"<p>C++相对于C语言而已，是一种强类型语言，类型检查更严格。<br></p>","date":"2017-07-15T05:36:48.000Z","pv":0,"totalPV":0,"categories":"cpp","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"python django 学习","date":"2017-09-27T07:41:19.000Z","_content":"","source":"_posts/django-start.md","raw":"---\ntitle: python django 学习\ndate: 2017-09-27 15:41:19\ntags:\ncategories:\n---\n","slug":"django-start","published":1,"updated":"2018-12-14T12:22:59.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s5r0006ilogi71zja52","content":"","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"python django 学习","path":"2017/09/27/django-start/","eyeCatchImage":null,"excerpt":null,"date":"2017-09-27T07:41:19.000Z","pv":0,"totalPV":0,"categories":"","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"C++函数重载","date":"2017-07-22T12:48:27.000Z","_content":"\nC++函数重载的原理，是c++编译器在利用name mangling技术（倾轧），来修改函数名，区分参数不同名字相同的函数。\n重命名时使用 v-c-i-f-l-d表示void,char,int,float,long,double参数及其引用。\n<!-- more -->\n    ```C++\n    nm a.out |grep func\n    00000000004006e0 T _Z4funci     // 使用C++编译，函数没有用extern \"C\" 修饰，倾轧\n\n    nm a.out |grep func\n    00000000004006e0 T func         // 使用C++编译，函数使用extern \"C\" 修饰，不倾轧\n    ```\n\n#### C++函数重载（静多态）\n函数名相同，函数参数列表不同：类型，个数，顺序。函数重载使用时，允许如下两种匹配原则：\n\n* 严格参数类型匹配\n  函数参数，使用强制类型转换\n* 参数使用隐式类型转换\n  需注意：double 可隐式转化为int float，可引起二义性，编译不通过。（或这int隐式转long double）\n  ```C++\n  #include<iostream>\n  using namespace std;\n  void func(int a)\n  {\n  \tcout<<a<<endl;\n  }\n  void func(float a)\n  {\n  \tcout<<a<<endl;\n  }\n  int main()\n  {\n  \tfunc(4.5); // 4.5默认double类型，可使用 func(4.5f);\n  \treturn 0;\n  }  \n  ```\n  ```C\n  // 编译出错：\n  func.cpp: In function ‘int main()’:\n  func.cpp:22: error: call of overloaded ‘func(double)’ is ambiguous\n  func.cpp:11: note: candidates are: void func(int)\n  func.cpp:16: note:                 void func(float)\n\n  //使用 func(4.5f)时，则编译通过：\n  nm a.out |grep func\n  00000000004008d0 t _GLOBAL__I__Z4funci\n  000000000040084d T _Z4funcf\n  0000000000400824 T _Z4funci\n  ```\n\n#### C++兼容C库\nC++使用extern \"C\"修饰函数, 可使函数不进行倾轧，用于兼任C库使用。注：如果声明和定义位于不相关文件中，则声明和定义处均须使用。\n```C++\n// main.cpp文件\nextern \"C\" void func(int a);\nint main()\n{\n\tfunc(3.5);\n\treturn 0;\n}\n\n// func.cpp文件\n#include <iostream>\nusing namespace std;\nextern \"C\" void func(int a)\n{\n\tcout<<a<<endl;\n}\n```\n\n```C\n//若 func.cpp文件中无 extern \"C\"修饰 func，则：\n/tmp/cc3LVVzf.o: In function `main':\ntest.cpp:(.text+0xa): undefined reference to `func'\ncollect2: ld returned 1 exit status\n//若 声明extern \"C\"位于单独的头文件，main.cpp, func.cpp都引用该头文件，func.cpp未使用 extern \"C\"，也可以编译通过。\n```\n---------------本笔记来自于《带你实战C++》\n","source":"_posts/cpp-overload.md","raw":"---\ntitle: C++函数重载\ndate: 2017-07-22 20:48:27\ntags: cpp\ncategories: cpp\n---\n\nC++函数重载的原理，是c++编译器在利用name mangling技术（倾轧），来修改函数名，区分参数不同名字相同的函数。\n重命名时使用 v-c-i-f-l-d表示void,char,int,float,long,double参数及其引用。\n<!-- more -->\n    ```C++\n    nm a.out |grep func\n    00000000004006e0 T _Z4funci     // 使用C++编译，函数没有用extern \"C\" 修饰，倾轧\n\n    nm a.out |grep func\n    00000000004006e0 T func         // 使用C++编译，函数使用extern \"C\" 修饰，不倾轧\n    ```\n\n#### C++函数重载（静多态）\n函数名相同，函数参数列表不同：类型，个数，顺序。函数重载使用时，允许如下两种匹配原则：\n\n* 严格参数类型匹配\n  函数参数，使用强制类型转换\n* 参数使用隐式类型转换\n  需注意：double 可隐式转化为int float，可引起二义性，编译不通过。（或这int隐式转long double）\n  ```C++\n  #include<iostream>\n  using namespace std;\n  void func(int a)\n  {\n  \tcout<<a<<endl;\n  }\n  void func(float a)\n  {\n  \tcout<<a<<endl;\n  }\n  int main()\n  {\n  \tfunc(4.5); // 4.5默认double类型，可使用 func(4.5f);\n  \treturn 0;\n  }  \n  ```\n  ```C\n  // 编译出错：\n  func.cpp: In function ‘int main()’:\n  func.cpp:22: error: call of overloaded ‘func(double)’ is ambiguous\n  func.cpp:11: note: candidates are: void func(int)\n  func.cpp:16: note:                 void func(float)\n\n  //使用 func(4.5f)时，则编译通过：\n  nm a.out |grep func\n  00000000004008d0 t _GLOBAL__I__Z4funci\n  000000000040084d T _Z4funcf\n  0000000000400824 T _Z4funci\n  ```\n\n#### C++兼容C库\nC++使用extern \"C\"修饰函数, 可使函数不进行倾轧，用于兼任C库使用。注：如果声明和定义位于不相关文件中，则声明和定义处均须使用。\n```C++\n// main.cpp文件\nextern \"C\" void func(int a);\nint main()\n{\n\tfunc(3.5);\n\treturn 0;\n}\n\n// func.cpp文件\n#include <iostream>\nusing namespace std;\nextern \"C\" void func(int a)\n{\n\tcout<<a<<endl;\n}\n```\n\n```C\n//若 func.cpp文件中无 extern \"C\"修饰 func，则：\n/tmp/cc3LVVzf.o: In function `main':\ntest.cpp:(.text+0xa): undefined reference to `func'\ncollect2: ld returned 1 exit status\n//若 声明extern \"C\"位于单独的头文件，main.cpp, func.cpp都引用该头文件，func.cpp未使用 extern \"C\"，也可以编译通过。\n```\n---------------本笔记来自于《带你实战C++》\n","slug":"cpp-overload","published":1,"updated":"2018-12-14T12:22:59.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s5s0007ilogtkhz2hg3","content":"<p>C++函数重载的原理，是c++编译器在利用name mangling技术（倾轧），来修改函数名，区分参数不同名字相同的函数。<br>重命名时使用 v-c-i-f-l-d表示void,char,int,float,long,double参数及其引用。<br><a id=\"more\"></a><br>    <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nm a.out |grep func</span><br><span class=\"line\"><span class=\"number\">00000000004006e0</span> T _Z4funci     <span class=\"comment\">// 使用C++编译，函数没有用extern \"C\" 修饰，倾轧</span></span><br><span class=\"line\"></span><br><span class=\"line\">nm a.out |grep func</span><br><span class=\"line\"><span class=\"number\">00000000004006e0</span> T func         <span class=\"comment\">// 使用C++编译，函数使用extern \"C\" 修饰，不倾轧</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"C-函数重载（静多态）\"><a href=\"#C-函数重载（静多态）\" class=\"headerlink\" title=\"C++函数重载（静多态）\"></a>C++函数重载（静多态）</h4><p>函数名相同，函数参数列表不同：类型，个数，顺序。函数重载使用时，允许如下两种匹配原则：</p>\n<ul>\n<li>严格参数类型匹配<br>函数参数，使用强制类型转换</li>\n<li><p>参数使用隐式类型转换<br>需注意：double 可隐式转化为int float，可引起二义性，编译不通过。（或这int隐式转long double）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">float</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfunc(<span class=\"number\">4.5</span>); <span class=\"comment\">// 4.5默认double类型，可使用 func(4.5f);</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编译出错：</span></span><br><span class=\"line\">func.cpp: In function ‘int main()’:</span><br><span class=\"line\">func.cpp:<span class=\"number\">22</span>: error: call of overloaded ‘func(<span class=\"keyword\">double</span>)’ is ambiguous</span><br><span class=\"line\">func.cpp:<span class=\"number\">11</span>: note: candidates are: <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\">func.cpp:16: note:                 void func(float)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用 func(4.5f)时，则编译通过：</span></span><br><span class=\"line\">nm a.out |grep func</span><br><span class=\"line\"><span class=\"number\">00000000004008</span>d0 t _GLOBAL__I__Z4funci</span><br><span class=\"line\"><span class=\"number\">000000000040084</span>d T _Z4funcf</span><br><span class=\"line\"><span class=\"number\">0000000000400824</span> T _Z4funci</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"C-兼容C库\"><a href=\"#C-兼容C库\" class=\"headerlink\" title=\"C++兼容C库\"></a>C++兼容C库</h4><p>C++使用extern “C”修饰函数, 可使函数不进行倾轧，用于兼任C库使用。注：如果声明和定义位于不相关文件中，则声明和定义处均须使用。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp文件</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfunc(<span class=\"number\">3.5</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// func.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//若 func.cpp文件中无 extern \"C\"修饰 func，则：</span></span><br><span class=\"line\">/tmp/cc3LVVzf.o: In function `main':</span><br><span class=\"line\">test.cpp:(.text+<span class=\"number\">0xa</span>): undefined reference to `func'</span><br><span class=\"line\">collect2: ld returned <span class=\"number\">1</span> <span class=\"built_in\">exit</span> status</span><br><span class=\"line\"><span class=\"comment\">//若 声明extern \"C\"位于单独的头文件，main.cpp, func.cpp都引用该头文件，func.cpp未使用 extern \"C\"，也可以编译通过。</span></span><br></pre></td></tr></table></figure>\n<p>—————本笔记来自于《带你实战C++》</p>\n","site":{"data":{}},"excerpt":"<p>C++函数重载的原理，是c++编译器在利用name mangling技术（倾轧），来修改函数名，区分参数不同名字相同的函数。<br>重命名时使用 v-c-i-f-l-d表示void,char,int,float,long,double参数及其引用。<br></p>","more":"<br>    <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nm a.out |grep func</span><br><span class=\"line\"><span class=\"number\">00000000004006e0</span> T _Z4funci     <span class=\"comment\">// 使用C++编译，函数没有用extern \"C\" 修饰，倾轧</span></span><br><span class=\"line\"></span><br><span class=\"line\">nm a.out |grep func</span><br><span class=\"line\"><span class=\"number\">00000000004006e0</span> T func         <span class=\"comment\">// 使用C++编译，函数使用extern \"C\" 修饰，不倾轧</span></span><br></pre></td></tr></table></figure><p></p>\n<h4 id=\"C-函数重载（静多态）\"><a href=\"#C-函数重载（静多态）\" class=\"headerlink\" title=\"C++函数重载（静多态）\"></a>C++函数重载（静多态）</h4><p>函数名相同，函数参数列表不同：类型，个数，顺序。函数重载使用时，允许如下两种匹配原则：</p>\n<ul>\n<li>严格参数类型匹配<br>函数参数，使用强制类型转换</li>\n<li><p>参数使用隐式类型转换<br>需注意：double 可隐式转化为int float，可引起二义性，编译不通过。（或这int隐式转long double）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">float</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfunc(<span class=\"number\">4.5</span>); <span class=\"comment\">// 4.5默认double类型，可使用 func(4.5f);</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编译出错：</span></span><br><span class=\"line\">func.cpp: In function ‘int main()’:</span><br><span class=\"line\">func.cpp:<span class=\"number\">22</span>: error: call of overloaded ‘func(<span class=\"keyword\">double</span>)’ is ambiguous</span><br><span class=\"line\">func.cpp:<span class=\"number\">11</span>: note: candidates are: <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\">func.cpp:16: note:                 void func(float)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用 func(4.5f)时，则编译通过：</span></span><br><span class=\"line\">nm a.out |grep func</span><br><span class=\"line\"><span class=\"number\">00000000004008</span>d0 t _GLOBAL__I__Z4funci</span><br><span class=\"line\"><span class=\"number\">000000000040084</span>d T _Z4funcf</span><br><span class=\"line\"><span class=\"number\">0000000000400824</span> T _Z4funci</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"C-兼容C库\"><a href=\"#C-兼容C库\" class=\"headerlink\" title=\"C++兼容C库\"></a>C++兼容C库</h4><p>C++使用extern “C”修饰函数, 可使函数不进行倾轧，用于兼任C库使用。注：如果声明和定义位于不相关文件中，则声明和定义处均须使用。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp文件</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfunc(<span class=\"number\">3.5</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// func.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//若 func.cpp文件中无 extern \"C\"修饰 func，则：</span></span><br><span class=\"line\">/tmp/cc3LVVzf.o: In function `main':</span><br><span class=\"line\">test.cpp:(.text+<span class=\"number\">0xa</span>): undefined reference to `func'</span><br><span class=\"line\">collect2: ld returned <span class=\"number\">1</span> <span class=\"built_in\">exit</span> status</span><br><span class=\"line\"><span class=\"comment\">//若 声明extern \"C\"位于单独的头文件，main.cpp, func.cpp都引用该头文件，func.cpp未使用 extern \"C\"，也可以编译通过。</span></span><br></pre></td></tr></table></figure>\n<p>—————本笔记来自于《带你实战C++》</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"C++函数重载","path":"2017/07/22/cpp-overload/","eyeCatchImage":null,"excerpt":"<p>C++函数重载的原理，是c++编译器在利用name mangling技术（倾轧），来修改函数名，区分参数不同名字相同的函数。<br>重命名时使用 v-c-i-f-l-d表示void,char,int,float,long,double参数及其引用。<br></p>","date":"2017-07-22T12:48:27.000Z","pv":0,"totalPV":0,"categories":"cpp","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"DNS 解析","date":"2017-02-06T13:35:15.000Z","_content":"\n## DNS域名系统\n　　DNS(Domain Name System，域名系统)，提供域名到IP的解析功能，可以采用**静态域名解析**方法，若解析不成功，再采用**动态域名解析**方法。使用静态域名解析表的方法，可以大大提高域名解析效率。\n<!--more -->\n\n### 静态域名查询\n\n* 本机配置域名到ip的解析于/etc/hosts中，以 *ip domain* 的形式；\n  ![hosts](dns/abc0000000000.png)\n* 通过查找本地的[nscd](http://www.10tiao.com/html/357/201607/2247484055/1.html)进程中缓存的: getent hosts baiweiguo.github.io。\n  ![resolv](dns/abc0000000004.png)\n  ![resolv](dns/abc0000000005.png)\n* 静态配置dns服务器，配置于: /etc/resolv.conf中，形式为：*nameserver ip*。其中，ip为dns服务器ip；\n  ![resolv](dns/abc0000000001.png)\n### 动态域名查询\n　　如果静态域名查询方式未查询到数据，客户端则会广播本机局域网，若局域网有[DHCP](http://baike.baidu.com/link?url=VFFbr-wynK1El3cj3OOjc77_I9kUXYbFkbxNClcF_SE8PR3eNA8DeXnwfgpbDu2hJu7AzUXIh_bRGJ8miM72C_)(动态主机配置协议)服务器时，才会响应给客户端dns ip：\n  ![](dns/abc0000000002.png)\n  若[本地DNS服务器](https://www.zhihu.com/question/48085305/answer/109256904)未解析成功，则会向dns服务器进行查询：\n  [![](dns/abc0000000003.png)](http://369369.blog.51cto.com/319630/812889/)\n\n## DNS查询方式\n　　分为递归查询与迭代查询[点此参见](http://blog.csdn.net/shanamaid/article/details/51758820)，[区别](https://zhidao.baidu.com/question/311381817.html)。\n\n## 浏览器域名解析\n","source":"_posts/dns.md","raw":"---\ntitle: DNS 解析\ndate: 2017-02-06 21:35:15\ntags: [dns,domain]\ncategories: network\n---\n\n## DNS域名系统\n　　DNS(Domain Name System，域名系统)，提供域名到IP的解析功能，可以采用**静态域名解析**方法，若解析不成功，再采用**动态域名解析**方法。使用静态域名解析表的方法，可以大大提高域名解析效率。\n<!--more -->\n\n### 静态域名查询\n\n* 本机配置域名到ip的解析于/etc/hosts中，以 *ip domain* 的形式；\n  ![hosts](dns/abc0000000000.png)\n* 通过查找本地的[nscd](http://www.10tiao.com/html/357/201607/2247484055/1.html)进程中缓存的: getent hosts baiweiguo.github.io。\n  ![resolv](dns/abc0000000004.png)\n  ![resolv](dns/abc0000000005.png)\n* 静态配置dns服务器，配置于: /etc/resolv.conf中，形式为：*nameserver ip*。其中，ip为dns服务器ip；\n  ![resolv](dns/abc0000000001.png)\n### 动态域名查询\n　　如果静态域名查询方式未查询到数据，客户端则会广播本机局域网，若局域网有[DHCP](http://baike.baidu.com/link?url=VFFbr-wynK1El3cj3OOjc77_I9kUXYbFkbxNClcF_SE8PR3eNA8DeXnwfgpbDu2hJu7AzUXIh_bRGJ8miM72C_)(动态主机配置协议)服务器时，才会响应给客户端dns ip：\n  ![](dns/abc0000000002.png)\n  若[本地DNS服务器](https://www.zhihu.com/question/48085305/answer/109256904)未解析成功，则会向dns服务器进行查询：\n  [![](dns/abc0000000003.png)](http://369369.blog.51cto.com/319630/812889/)\n\n## DNS查询方式\n　　分为递归查询与迭代查询[点此参见](http://blog.csdn.net/shanamaid/article/details/51758820)，[区别](https://zhidao.baidu.com/question/311381817.html)。\n\n## 浏览器域名解析\n","slug":"dns","published":1,"updated":"2018-12-14T12:22:59.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s5t000bilogy3ei8tkk","content":"<h2 id=\"DNS域名系统\"><a href=\"#DNS域名系统\" class=\"headerlink\" title=\"DNS域名系统\"></a>DNS域名系统</h2><p>　　DNS(Domain Name System，域名系统)，提供域名到IP的解析功能，可以采用<strong>静态域名解析</strong>方法，若解析不成功，再采用<strong>动态域名解析</strong>方法。使用静态域名解析表的方法，可以大大提高域名解析效率。<br><a id=\"more\"></a></p>\n<h3 id=\"静态域名查询\"><a href=\"#静态域名查询\" class=\"headerlink\" title=\"静态域名查询\"></a>静态域名查询</h3><ul>\n<li>本机配置域名到ip的解析于/etc/hosts中，以 <em>ip domain</em> 的形式；<br><img src=\"/2017/02/06/dns/abc0000000000.png\" alt=\"hosts\"></li>\n<li>通过查找本地的<a href=\"http://www.10tiao.com/html/357/201607/2247484055/1.html\" target=\"_blank\" rel=\"noopener\">nscd</a>进程中缓存的: getent hosts baiweiguo.github.io。<br><img src=\"/2017/02/06/dns/abc0000000004.png\" alt=\"resolv\"><br><img src=\"/2017/02/06/dns/abc0000000005.png\" alt=\"resolv\"></li>\n<li>静态配置dns服务器，配置于: /etc/resolv.conf中，形式为：<em>nameserver ip</em>。其中，ip为dns服务器ip；<br><img src=\"/2017/02/06/dns/abc0000000001.png\" alt=\"resolv\"><h3 id=\"动态域名查询\"><a href=\"#动态域名查询\" class=\"headerlink\" title=\"动态域名查询\"></a>动态域名查询</h3>　　如果静态域名查询方式未查询到数据，客户端则会广播本机局域网，若局域网有<a href=\"http://baike.baidu.com/link?url=VFFbr-wynK1El3cj3OOjc77_I9kUXYbFkbxNClcF_SE8PR3eNA8DeXnwfgpbDu2hJu7AzUXIh_bRGJ8miM72C_\" target=\"_blank\" rel=\"noopener\">DHCP</a>(动态主机配置协议)服务器时，才会响应给客户端dns ip：<br><img src=\"/2017/02/06/dns/abc0000000002.png\" alt=\"\"><br>若<a href=\"https://www.zhihu.com/question/48085305/answer/109256904\" target=\"_blank\" rel=\"noopener\">本地DNS服务器</a>未解析成功，则会向dns服务器进行查询：<br><a href=\"http://369369.blog.51cto.com/319630/812889/\" target=\"_blank\" rel=\"noopener\"><img src=\"/2017/02/06/dns/abc0000000003.png\" alt=\"\"></a></li>\n</ul>\n<h2 id=\"DNS查询方式\"><a href=\"#DNS查询方式\" class=\"headerlink\" title=\"DNS查询方式\"></a>DNS查询方式</h2><p>　　分为递归查询与迭代查询<a href=\"http://blog.csdn.net/shanamaid/article/details/51758820\" target=\"_blank\" rel=\"noopener\">点此参见</a>，<a href=\"https://zhidao.baidu.com/question/311381817.html\" target=\"_blank\" rel=\"noopener\">区别</a>。</p>\n<h2 id=\"浏览器域名解析\"><a href=\"#浏览器域名解析\" class=\"headerlink\" title=\"浏览器域名解析\"></a>浏览器域名解析</h2>","site":{"data":{}},"excerpt":"<h2 id=\"DNS域名系统\"><a href=\"#DNS域名系统\" class=\"headerlink\" title=\"DNS域名系统\"></a>DNS域名系统</h2><p>　　DNS(Domain Name System，域名系统)，提供域名到IP的解析功能，可以采用<strong>静态域名解析</strong>方法，若解析不成功，再采用<strong>动态域名解析</strong>方法。使用静态域名解析表的方法，可以大大提高域名解析效率。<br></p>","more":"<p></p>\n<h3 id=\"静态域名查询\"><a href=\"#静态域名查询\" class=\"headerlink\" title=\"静态域名查询\"></a>静态域名查询</h3><ul>\n<li>本机配置域名到ip的解析于/etc/hosts中，以 <em>ip domain</em> 的形式；<br><img src=\"/2017/02/06/dns/abc0000000000.png\" alt=\"hosts\"></li>\n<li>通过查找本地的<a href=\"http://www.10tiao.com/html/357/201607/2247484055/1.html\" target=\"_blank\" rel=\"noopener\">nscd</a>进程中缓存的: getent hosts baiweiguo.github.io。<br><img src=\"/2017/02/06/dns/abc0000000004.png\" alt=\"resolv\"><br><img src=\"/2017/02/06/dns/abc0000000005.png\" alt=\"resolv\"></li>\n<li>静态配置dns服务器，配置于: /etc/resolv.conf中，形式为：<em>nameserver ip</em>。其中，ip为dns服务器ip；<br><img src=\"/2017/02/06/dns/abc0000000001.png\" alt=\"resolv\"><h3 id=\"动态域名查询\"><a href=\"#动态域名查询\" class=\"headerlink\" title=\"动态域名查询\"></a>动态域名查询</h3>　　如果静态域名查询方式未查询到数据，客户端则会广播本机局域网，若局域网有<a href=\"http://baike.baidu.com/link?url=VFFbr-wynK1El3cj3OOjc77_I9kUXYbFkbxNClcF_SE8PR3eNA8DeXnwfgpbDu2hJu7AzUXIh_bRGJ8miM72C_\" target=\"_blank\" rel=\"noopener\">DHCP</a>(动态主机配置协议)服务器时，才会响应给客户端dns ip：<br><img src=\"/2017/02/06/dns/abc0000000002.png\" alt=\"\"><br>若<a href=\"https://www.zhihu.com/question/48085305/answer/109256904\" target=\"_blank\" rel=\"noopener\">本地DNS服务器</a>未解析成功，则会向dns服务器进行查询：<br><a href=\"http://369369.blog.51cto.com/319630/812889/\" target=\"_blank\" rel=\"noopener\"><img src=\"/2017/02/06/dns/abc0000000003.png\" alt=\"\"></a></li>\n</ul>\n<h2 id=\"DNS查询方式\"><a href=\"#DNS查询方式\" class=\"headerlink\" title=\"DNS查询方式\"></a>DNS查询方式</h2><p>　　分为递归查询与迭代查询<a href=\"http://blog.csdn.net/shanamaid/article/details/51758820\" target=\"_blank\" rel=\"noopener\">点此参见</a>，<a href=\"https://zhidao.baidu.com/question/311381817.html\" target=\"_blank\" rel=\"noopener\">区别</a>。</p>\n<h2 id=\"浏览器域名解析\"><a href=\"#浏览器域名解析\" class=\"headerlink\" title=\"浏览器域名解析\"></a>浏览器域名解析</h2>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"DNS 解析","path":"2017/02/06/dns/","eyeCatchImage":null,"excerpt":"<h2 id=\"DNS域名系统\"><a href=\"#DNS域名系统\" class=\"headerlink\" title=\"DNS域名系统\"></a>DNS域名系统</h2><p>　　DNS(Domain Name System，域名系统)，提供域名到IP的解析功能，可以采用<strong>静态域名解析</strong>方法，若解析不成功，再采用<strong>动态域名解析</strong>方法。使用静态域名解析表的方法，可以大大提高域名解析效率。<br></p>","date":"2017-02-06T13:35:15.000Z","pv":0,"totalPV":0,"categories":"network","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-12-14T12:22:59.212Z","updated":"2018-12-14T12:22:59.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s5u000cilog3yspir1z","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br></p>","more":"<p></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"Hello World","path":"2018/12/14/hello-world/","eyeCatchImage":null,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br></p>","date":"2018-12-14T12:22:59.212Z","pv":0,"totalPV":0,"categories":"","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"linux下简单shell攻击命令","date":"2017-02-15T12:55:02.000Z","_content":"\n\n### 发包命令\n* udp发包命令：exec 3<>/dev/udp/ip/port; echo -e \"test abc\" >&3 // 发一个udp包\n* tcp发包命令：exec 3<>/dev/tcp/ip/port;  // 发一个syn包\n","source":"_posts/linux-attack-cmd.md","raw":"---\ntitle: linux下简单shell攻击命令\ndate: 2017-02-15 20:55:02\ntags: [linux, shell, attack]\ncategories: linux\n---\n\n\n### 发包命令\n* udp发包命令：exec 3<>/dev/udp/ip/port; echo -e \"test abc\" >&3 // 发一个udp包\n* tcp发包命令：exec 3<>/dev/tcp/ip/port;  // 发一个syn包\n","slug":"linux-attack-cmd","published":1,"updated":"2018-12-14T12:22:59.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s5z000gilogn29z4ojp","content":"<h3 id=\"发包命令\"><a href=\"#发包命令\" class=\"headerlink\" title=\"发包命令\"></a>发包命令</h3><ul>\n<li>udp发包命令：exec 3&lt;&gt;/dev/udp/ip/port; echo -e “test abc” &gt;&amp;3 // 发一个udp包</li>\n<li>tcp发包命令：exec 3&lt;&gt;/dev/tcp/ip/port;  // 发一个syn包</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"发包命令\"><a href=\"#发包命令\" class=\"headerlink\" title=\"发包命令\"></a>发包命令</h3><ul>\n<li>udp发包命令：exec 3&lt;&gt;/dev/udp/ip/port; echo -e “test abc” &gt;&amp;3 // 发一个udp包</li>\n<li>tcp发包命令：exec 3&lt;&gt;/dev/tcp/ip/port;  // 发一个syn包</li>\n</ul>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"linux下简单shell攻击命令","path":"2017/02/15/linux-attack-cmd/","eyeCatchImage":null,"excerpt":null,"date":"2017-02-15T12:55:02.000Z","pv":0,"totalPV":0,"categories":"linux","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"C语言位运算","date":"2017-02-21T10:47:54.000Z","_content":"\n\n```C\n#define COMM_BIT_SET(a,b)     ((a) |= (1<<(b)))   // 将 a 的 b 位置1（1左移b位）\n#define COMM_BIT_CLR(a,b)     ((a) &= ~(1<<(b)))  // 将 a 的 b 位清零\n#define COMM_BIT_GET(a,b)     (!!((a) & (1<<(b)))) // 判断 a的b位是否置1 （!!用于将正数转为0或1）\n```\n<!-- more -->\nCOMM_BIT_SET与COMM_BIT_GET通常组合使用：\n\n```C\nenum {\n  TEST1 = 1,\n  TEST2 = 2,\n};\n\nint i = 0;\nCOMM_BIT_SET(i, TEST1);\ncout<< COMM_BIT_GET(i, TEST1) <<endl;  // true\ncout<< COMM_BIT_GET(i, TEST2) <<endl;  // false\n\nCOMM_BIT_SET(i, TEST2);\ncout<< COMM_BIT_GET(i, TEST1) <<endl;  // false\ncout<< COMM_BIT_GET(i, TEST2) <<endl;  // true\n\n```\n更多，[参见](http://imhuchao.com/423.html)\n","source":"_posts/macro.md","raw":"---\ntitle: C语言位运算\ndate: 2017-02-21 18:47:54\ntags: [c, macro]\ncategories: c\n---\n\n\n```C\n#define COMM_BIT_SET(a,b)     ((a) |= (1<<(b)))   // 将 a 的 b 位置1（1左移b位）\n#define COMM_BIT_CLR(a,b)     ((a) &= ~(1<<(b)))  // 将 a 的 b 位清零\n#define COMM_BIT_GET(a,b)     (!!((a) & (1<<(b)))) // 判断 a的b位是否置1 （!!用于将正数转为0或1）\n```\n<!-- more -->\nCOMM_BIT_SET与COMM_BIT_GET通常组合使用：\n\n```C\nenum {\n  TEST1 = 1,\n  TEST2 = 2,\n};\n\nint i = 0;\nCOMM_BIT_SET(i, TEST1);\ncout<< COMM_BIT_GET(i, TEST1) <<endl;  // true\ncout<< COMM_BIT_GET(i, TEST2) <<endl;  // false\n\nCOMM_BIT_SET(i, TEST2);\ncout<< COMM_BIT_GET(i, TEST1) <<endl;  // false\ncout<< COMM_BIT_GET(i, TEST2) <<endl;  // true\n\n```\n更多，[参见](http://imhuchao.com/423.html)\n","slug":"macro","published":1,"updated":"2018-12-14T12:22:59.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s61000iilogqa7bytpa","content":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> COMM_BIT_SET(a,b)     ((a) |= (1&lt;&lt;(b)))   <span class=\"comment\">// 将 a 的 b 位置1（1左移b位）</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> COMM_BIT_CLR(a,b)     ((a) &amp;= ~(1&lt;&lt;(b)))  <span class=\"comment\">// 将 a 的 b 位清零</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> COMM_BIT_GET(a,b)     (!!((a) &amp; (1&lt;&lt;(b)))) <span class=\"comment\">// 判断 a的b位是否置1 （!!用于将正数转为0或1）</span></span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>COMM_BIT_SET与COMM_BIT_GET通常组合使用：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> &#123;</span><br><span class=\"line\">  TEST1 = <span class=\"number\">1</span>,</span><br><span class=\"line\">  TEST2 = <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">COMM_BIT_SET(i, TEST1);</span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt; COMM_BIT_GET(i, TEST1) &lt;&lt;<span class=\"built_in\">endl</span>;  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt; COMM_BIT_GET(i, TEST2) &lt;&lt;<span class=\"built_in\">endl</span>;  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">COMM_BIT_SET(i, TEST2);</span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt; COMM_BIT_GET(i, TEST1) &lt;&lt;<span class=\"built_in\">endl</span>;  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt; COMM_BIT_GET(i, TEST2) &lt;&lt;<span class=\"built_in\">endl</span>;  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>更多，<a href=\"http://imhuchao.com/423.html\" target=\"_blank\" rel=\"noopener\">参见</a></p>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> COMM_BIT_SET(a,b)     ((a) |= (1&lt;&lt;(b)))   <span class=\"comment\">// 将 a 的 b 位置1（1左移b位）</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> COMM_BIT_CLR(a,b)     ((a) &amp;= ~(1&lt;&lt;(b)))  <span class=\"comment\">// 将 a 的 b 位清零</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> COMM_BIT_GET(a,b)     (!!((a) &amp; (1&lt;&lt;(b)))) <span class=\"comment\">// 判断 a的b位是否置1 （!!用于将正数转为0或1）</span></span></span><br></pre></td></tr></table></figure>","more":"<p>COMM_BIT_SET与COMM_BIT_GET通常组合使用：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> &#123;</span><br><span class=\"line\">  TEST1 = <span class=\"number\">1</span>,</span><br><span class=\"line\">  TEST2 = <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">COMM_BIT_SET(i, TEST1);</span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt; COMM_BIT_GET(i, TEST1) &lt;&lt;<span class=\"built_in\">endl</span>;  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt; COMM_BIT_GET(i, TEST2) &lt;&lt;<span class=\"built_in\">endl</span>;  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">COMM_BIT_SET(i, TEST2);</span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt; COMM_BIT_GET(i, TEST1) &lt;&lt;<span class=\"built_in\">endl</span>;  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt; COMM_BIT_GET(i, TEST2) &lt;&lt;<span class=\"built_in\">endl</span>;  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>更多，<a href=\"http://imhuchao.com/423.html\" target=\"_blank\" rel=\"noopener\">参见</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"C语言位运算","path":"2017/02/21/macro/","eyeCatchImage":null,"excerpt":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> COMM_BIT_SET(a,b)     ((a) |= (1&lt;&lt;(b)))   <span class=\"comment\">// 将 a 的 b 位置1（1左移b位）</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> COMM_BIT_CLR(a,b)     ((a) &amp;= ~(1&lt;&lt;(b)))  <span class=\"comment\">// 将 a 的 b 位清零</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> COMM_BIT_GET(a,b)     (!!((a) &amp; (1&lt;&lt;(b)))) <span class=\"comment\">// 判断 a的b位是否置1 （!!用于将正数转为0或1）</span></span></span><br></pre></td></tr></table></figure>","date":"2017-02-21T10:47:54.000Z","pv":0,"totalPV":0,"categories":"c","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"观察者模式","date":"2017-08-14T11:39:33.000Z","_content":"","source":"_posts/observer-li.md","raw":"---\ntitle: 观察者模式\ndate: 2017-08-14 19:39:33\ntags: [设计模式, 李建中]\ncategories: 设计模式\n---\n","slug":"observer-li","published":1,"updated":"2018-12-14T12:22:59.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s63000milogklvhbhed","content":"","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"观察者模式","path":"2017/08/14/observer-li/","eyeCatchImage":null,"excerpt":null,"date":"2017-08-14T11:39:33.000Z","pv":0,"totalPV":0,"categories":"设计模式","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"后台服务框架","date":"2017-02-25T07:21:32.000Z","_content":"\n\n设置服务器最大文件描述符个数，控制资源。\nlinux中是通过文件方式来管理系统的。因此，系统能够承载的tcp连接数和系统文件打开数目能力相关，对于linux，系统最多能够打开的文件数目可通过/proc/sys/fs/file-max查看。\n使用select的方式，tcp最多只能打开1024各文件描述符；若使用poll，可以自己定义个数。\n\n可设置服务端打开秒数符总数限制：\nTCPServerNum + AcceptClientNum + UDPServerNum + TCPClientNum + OtherFdNum(std, 文件fd， mysql fd等)\n","source":"_posts/server-framework.md","raw":"---\ntitle: 后台服务框架\ndate: 2017-02-25 15:21:32\ntags: [\"server\",\"framework\"]\ncategories: svr_framework\n---\n\n\n设置服务器最大文件描述符个数，控制资源。\nlinux中是通过文件方式来管理系统的。因此，系统能够承载的tcp连接数和系统文件打开数目能力相关，对于linux，系统最多能够打开的文件数目可通过/proc/sys/fs/file-max查看。\n使用select的方式，tcp最多只能打开1024各文件描述符；若使用poll，可以自己定义个数。\n\n可设置服务端打开秒数符总数限制：\nTCPServerNum + AcceptClientNum + UDPServerNum + TCPClientNum + OtherFdNum(std, 文件fd， mysql fd等)\n","slug":"server-framework","published":1,"updated":"2018-12-14T12:22:59.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s64000oilog7fxe4exr","content":"<p>设置服务器最大文件描述符个数，控制资源。<br>linux中是通过文件方式来管理系统的。因此，系统能够承载的tcp连接数和系统文件打开数目能力相关，对于linux，系统最多能够打开的文件数目可通过/proc/sys/fs/file-max查看。<br>使用select的方式，tcp最多只能打开1024各文件描述符；若使用poll，可以自己定义个数。</p>\n<p>可设置服务端打开秒数符总数限制：<br>TCPServerNum + AcceptClientNum + UDPServerNum + TCPClientNum + OtherFdNum(std, 文件fd， mysql fd等)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>设置服务器最大文件描述符个数，控制资源。<br>linux中是通过文件方式来管理系统的。因此，系统能够承载的tcp连接数和系统文件打开数目能力相关，对于linux，系统最多能够打开的文件数目可通过/proc/sys/fs/file-max查看。<br>使用select的方式，tcp最多只能打开1024各文件描述符；若使用poll，可以自己定义个数。</p>\n<p>可设置服务端打开秒数符总数限制：<br>TCPServerNum + AcceptClientNum + UDPServerNum + TCPClientNum + OtherFdNum(std, 文件fd， mysql fd等)</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"后台服务框架","path":"2017/02/25/server-framework/","eyeCatchImage":null,"excerpt":null,"date":"2017-02-25T07:21:32.000Z","pv":0,"totalPV":0,"categories":"svr_framework","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"sharpen_images","date":"2017-05-01T11:22:46.000Z","_content":"\nhttps://www.youtube.com/watch?v=_tQu4OMlYso&t=54s\n","source":"_posts/sharpen-images.md","raw":"---\ntitle: sharpen_images\ndate: 2017-05-01 19:22:46\ntags: [\"ps\", \"sharpen\"]\ncategories: [\"ps\"]\n---\n\nhttps://www.youtube.com/watch?v=_tQu4OMlYso&t=54s\n","slug":"sharpen-images","published":1,"updated":"2018-12-14T12:22:59.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s67000silogdmwf5k2k","content":"<p><a href=\"https://www.youtube.com/watch?v=_tQu4OMlYso&amp;t=54s\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=_tQu4OMlYso&amp;t=54s</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.youtube.com/watch?v=_tQu4OMlYso&amp;t=54s\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=_tQu4OMlYso&amp;t=54s</a></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"sharpen_images","path":"2017/05/01/sharpen-images/","eyeCatchImage":null,"excerpt":null,"date":"2017-05-01T11:22:46.000Z","pv":0,"totalPV":0,"categories":"ps","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"锐化","date":"2017-08-04T12:27:35.000Z","_content":"\n\nPS三种锐化效果：常规锐化，精细化锐化，质感锐化。------- 李涛《数码摄影后期高手之路》\n\n<!-- more -->\n### 常规锐化（高反差保留）\n\n1.复制一个图层，使用高反差保留滤镜\n2.图像叠加\n\n### 精细化锐化（推荐）\n\n1.锐化对象：LAB模式中的亮度通道，以减少彩色溢出情况。锐化是增加对比度，可能造成高光溢出\n2.使用2次USM锐化。一次半径大一些5，一次半径小一些1.2\n\n### 质感锐化\n\n1.生成两个背景图层；\n2.其中一个使用表面模糊；\n3.另外一个使用应用图像，减去表面模糊图层，得到颗粒图像；\n4.叠加图像\n","source":"_posts/sharpen-litao.md","raw":"---\ntitle: 锐化\ndate: 2017-08-04 20:27:35\ntags: ps\ncategories: ps\n---\n\n\nPS三种锐化效果：常规锐化，精细化锐化，质感锐化。------- 李涛《数码摄影后期高手之路》\n\n<!-- more -->\n### 常规锐化（高反差保留）\n\n1.复制一个图层，使用高反差保留滤镜\n2.图像叠加\n\n### 精细化锐化（推荐）\n\n1.锐化对象：LAB模式中的亮度通道，以减少彩色溢出情况。锐化是增加对比度，可能造成高光溢出\n2.使用2次USM锐化。一次半径大一些5，一次半径小一些1.2\n\n### 质感锐化\n\n1.生成两个背景图层；\n2.其中一个使用表面模糊；\n3.另外一个使用应用图像，减去表面模糊图层，得到颗粒图像；\n4.叠加图像\n","slug":"sharpen-litao","published":1,"updated":"2018-12-14T12:22:59.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s68000uilogag1u669t","content":"<p>PS三种锐化效果：常规锐化，精细化锐化，质感锐化。——- 李涛《数码摄影后期高手之路》</p>\n<a id=\"more\"></a>\n<h3 id=\"常规锐化（高反差保留）\"><a href=\"#常规锐化（高反差保留）\" class=\"headerlink\" title=\"常规锐化（高反差保留）\"></a>常规锐化（高反差保留）</h3><p>1.复制一个图层，使用高反差保留滤镜<br>2.图像叠加</p>\n<h3 id=\"精细化锐化（推荐）\"><a href=\"#精细化锐化（推荐）\" class=\"headerlink\" title=\"精细化锐化（推荐）\"></a>精细化锐化（推荐）</h3><p>1.锐化对象：LAB模式中的亮度通道，以减少彩色溢出情况。锐化是增加对比度，可能造成高光溢出<br>2.使用2次USM锐化。一次半径大一些5，一次半径小一些1.2</p>\n<h3 id=\"质感锐化\"><a href=\"#质感锐化\" class=\"headerlink\" title=\"质感锐化\"></a>质感锐化</h3><p>1.生成两个背景图层；<br>2.其中一个使用表面模糊；<br>3.另外一个使用应用图像，减去表面模糊图层，得到颗粒图像；<br>4.叠加图像</p>\n","site":{"data":{}},"excerpt":"<p>PS三种锐化效果：常规锐化，精细化锐化，质感锐化。——- 李涛《数码摄影后期高手之路》</p>","more":"<h3 id=\"常规锐化（高反差保留）\"><a href=\"#常规锐化（高反差保留）\" class=\"headerlink\" title=\"常规锐化（高反差保留）\"></a>常规锐化（高反差保留）</h3><p>1.复制一个图层，使用高反差保留滤镜<br>2.图像叠加</p>\n<h3 id=\"精细化锐化（推荐）\"><a href=\"#精细化锐化（推荐）\" class=\"headerlink\" title=\"精细化锐化（推荐）\"></a>精细化锐化（推荐）</h3><p>1.锐化对象：LAB模式中的亮度通道，以减少彩色溢出情况。锐化是增加对比度，可能造成高光溢出<br>2.使用2次USM锐化。一次半径大一些5，一次半径小一些1.2</p>\n<h3 id=\"质感锐化\"><a href=\"#质感锐化\" class=\"headerlink\" title=\"质感锐化\"></a>质感锐化</h3><p>1.生成两个背景图层；<br>2.其中一个使用表面模糊；<br>3.另外一个使用应用图像，减去表面模糊图层，得到颗粒图像；<br>4.叠加图像</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"锐化","path":"2017/08/04/sharpen-litao/","eyeCatchImage":null,"excerpt":"<p>PS三种锐化效果：常规锐化，精细化锐化，质感锐化。——- 李涛《数码摄影后期高手之路》</p>","date":"2017-08-04T12:27:35.000Z","pv":0,"totalPV":0,"categories":"ps","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"单例模式","date":"2017-02-21T14:23:18.000Z","_content":"\n\n 　　单例模式，保证一个类只有一个实例，是设计模式中最简单的形式之一。例如windows回收站，在各个文件夹目录下，均有个回收站，与桌面上回收站是同一个实例：\n <!-- more -->\n![](singleton/abc0000000007.png)\n\n\n* 构造函数私有化，只能在本类中定义对象\n* 类共享一个实例化对象\n\n```java\nclass Singleton{\n  private Singleton()   // 构造函数私有话，不能使用new进行对象实例化\n  {\n  }\n  private static Singleton instance = new Singleton();\n  public static Singleton getInstance()\n  {\n      return instance;\n  }\n}\n```\n\n单例模式有两种：\n* 饿汉式：如上述代码，类中始终为用户提供一个本类的实例化对象；\n* 懒汉式：类中不准备好实例化对象，在对象使用之前进行实例化：\n```java\nclass Singleton{\n  private Singleton()   // 构造函数私有话，不能使用new进行对象实例化\n  {\n  }\n  private static Singleton instance;\n  public static Singleton getInstance()\n  {\n      if( instance == null )\n      {\n         instance = new Singleton();\n      }\n      return instance;\n  }\n}\n```\n一般使用饿汉式即可。\n","source":"_posts/singleton.md","raw":"---\ntitle: 单例模式\ndate: 2017-02-21 22:23:18\ntags: [\"设计模式\", \"单例模式\", \"java\"]\ncategories: 设计模式\n---\n\n\n 　　单例模式，保证一个类只有一个实例，是设计模式中最简单的形式之一。例如windows回收站，在各个文件夹目录下，均有个回收站，与桌面上回收站是同一个实例：\n <!-- more -->\n![](singleton/abc0000000007.png)\n\n\n* 构造函数私有化，只能在本类中定义对象\n* 类共享一个实例化对象\n\n```java\nclass Singleton{\n  private Singleton()   // 构造函数私有话，不能使用new进行对象实例化\n  {\n  }\n  private static Singleton instance = new Singleton();\n  public static Singleton getInstance()\n  {\n      return instance;\n  }\n}\n```\n\n单例模式有两种：\n* 饿汉式：如上述代码，类中始终为用户提供一个本类的实例化对象；\n* 懒汉式：类中不准备好实例化对象，在对象使用之前进行实例化：\n```java\nclass Singleton{\n  private Singleton()   // 构造函数私有话，不能使用new进行对象实例化\n  {\n  }\n  private static Singleton instance;\n  public static Singleton getInstance()\n  {\n      if( instance == null )\n      {\n         instance = new Singleton();\n      }\n      return instance;\n  }\n}\n```\n一般使用饿汉式即可。\n","slug":"singleton","published":1,"updated":"2018-12-14T12:22:59.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s69000xilogihw0o9s7","content":"<p> 　　单例模式，保证一个类只有一个实例，是设计模式中最简单的形式之一。例如windows回收站，在各个文件夹目录下，均有个回收站，与桌面上回收站是同一个实例：<br> <a id=\"more\"></a><br><img src=\"/2017/02/21/singleton/abc0000000007.png\" alt=\"\"></p>\n<ul>\n<li>构造函数私有化，只能在本类中定义对象</li>\n<li>类共享一个实例化对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span>   <span class=\"comment\">// 构造函数私有话，不能使用new进行对象实例化</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>单例模式有两种：</p>\n<ul>\n<li>饿汉式：如上述代码，类中始终为用户提供一个本类的实例化对象；</li>\n<li>懒汉式：类中不准备好实例化对象，在对象使用之前进行实例化：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span>   <span class=\"comment\">// 构造函数私有话，不能使用new进行对象实例化</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( instance == <span class=\"keyword\">null</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>一般使用饿汉式即可。</p>\n","site":{"data":{}},"excerpt":"<p> 　　单例模式，保证一个类只有一个实例，是设计模式中最简单的形式之一。例如windows回收站，在各个文件夹目录下，均有个回收站，与桌面上回收站是同一个实例：<br></p>","more":"<br><img src=\"/2017/02/21/singleton/abc0000000007.png\" alt=\"\"><p></p>\n<ul>\n<li>构造函数私有化，只能在本类中定义对象</li>\n<li>类共享一个实例化对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span>   <span class=\"comment\">// 构造函数私有话，不能使用new进行对象实例化</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>单例模式有两种：</p>\n<ul>\n<li>饿汉式：如上述代码，类中始终为用户提供一个本类的实例化对象；</li>\n<li>懒汉式：类中不准备好实例化对象，在对象使用之前进行实例化：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span>   <span class=\"comment\">// 构造函数私有话，不能使用new进行对象实例化</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( instance == <span class=\"keyword\">null</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>一般使用饿汉式即可。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"单例模式","path":"2017/02/21/singleton/","eyeCatchImage":null,"excerpt":"<p> 　　单例模式，保证一个类只有一个实例，是设计模式中最简单的形式之一。例如windows回收站，在各个文件夹目录下，均有个回收站，与桌面上回收站是同一个实例：<br></p>","date":"2017-02-21T14:23:18.000Z","pv":0,"totalPV":0,"categories":"设计模式","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"静态成员函数调用非静态成员变量","date":"2017-02-07T08:14:49.000Z","_content":"\n　　一般使用情况下，类静态成员函数调用静态成员变量，不能调用非静态变量，否则编译器会出错。因为非静态成员属于类对象，只有在类对象的实例创建时，才会分配内存，然后通过对象进行访问；而静态成员属于整个类，不需要类对象的创建，此时使用静态成员访问非静态成员好比访问内存中不存在的东西。\n\n<!--more -->\n　　静态成员调用静态成员的一般方法：\n\n```C++\n#include <iostream>\nusing namespace std;\n\nclass CStatic\n{\npublic:\n    static void Print()\n    {\n        cout<<m_iTest<<endl;\n    }\nprivate:\n    static int m_iTest; //此处为静态成员变量声明\n};\n\nint CStatic::m_iTest = 0; // 此处为定义，必须定义，否则编译出错。此处亦可用 int CStatic::m_iTest; 代替\n\nint main(int argc, char* argv[])\n{\n    CStatic cs;\n    cs.Print();\n    return 0;\n}\n```\n\n\n　　使用上述方式，有个问题，就是**需要对静态成员变量预先在类外定义，若成员变量个数较多，逐个定义起来比较麻烦**。此时，可使用静态成员调用非静态成员方法，[参见](http://www.cnblogs.com/rickyk/p/4238380.html)：\n\n```C++\n#include <iostream>\nusing namespace std;\n\nclass CStatic\n{\npublic:\n    CStatic()\n    {\n        m_iTest = 0;\n        s_pInstance = this;   // 构造函数初始化\n    }\n    static void Print()\n    {\n        s_pInstance->m_iTest += 1;  //\n        cout<<s_pInstance->m_iTest<<endl;\n    }\nprivate:\n    int m_iTest;\n    static CStatic* s_pInstance;\n};\nCStatic* CStatic::s_pInstance = NULL ;\nint main(int argc, char* argv[])\n{\n    CStatic cs;   // 已加载到内存，构造函数中有参数this进行初始化（相当于c语言先定义变量，再调用函数）\n    cs.Print();\n    CStatic cs1;\n    return 0;\n}\n\n```\n","source":"_posts/static-class-func-var.md","raw":"---\ntitle: 静态成员函数调用非静态成员变量\ndate: 2017-02-07 16:14:49\ntags: [c++, static]\ncategories: c++\n---\n\n　　一般使用情况下，类静态成员函数调用静态成员变量，不能调用非静态变量，否则编译器会出错。因为非静态成员属于类对象，只有在类对象的实例创建时，才会分配内存，然后通过对象进行访问；而静态成员属于整个类，不需要类对象的创建，此时使用静态成员访问非静态成员好比访问内存中不存在的东西。\n\n<!--more -->\n　　静态成员调用静态成员的一般方法：\n\n```C++\n#include <iostream>\nusing namespace std;\n\nclass CStatic\n{\npublic:\n    static void Print()\n    {\n        cout<<m_iTest<<endl;\n    }\nprivate:\n    static int m_iTest; //此处为静态成员变量声明\n};\n\nint CStatic::m_iTest = 0; // 此处为定义，必须定义，否则编译出错。此处亦可用 int CStatic::m_iTest; 代替\n\nint main(int argc, char* argv[])\n{\n    CStatic cs;\n    cs.Print();\n    return 0;\n}\n```\n\n\n　　使用上述方式，有个问题，就是**需要对静态成员变量预先在类外定义，若成员变量个数较多，逐个定义起来比较麻烦**。此时，可使用静态成员调用非静态成员方法，[参见](http://www.cnblogs.com/rickyk/p/4238380.html)：\n\n```C++\n#include <iostream>\nusing namespace std;\n\nclass CStatic\n{\npublic:\n    CStatic()\n    {\n        m_iTest = 0;\n        s_pInstance = this;   // 构造函数初始化\n    }\n    static void Print()\n    {\n        s_pInstance->m_iTest += 1;  //\n        cout<<s_pInstance->m_iTest<<endl;\n    }\nprivate:\n    int m_iTest;\n    static CStatic* s_pInstance;\n};\nCStatic* CStatic::s_pInstance = NULL ;\nint main(int argc, char* argv[])\n{\n    CStatic cs;   // 已加载到内存，构造函数中有参数this进行初始化（相当于c语言先定义变量，再调用函数）\n    cs.Print();\n    CStatic cs1;\n    return 0;\n}\n\n```\n","slug":"static-class-func-var","published":1,"updated":"2018-12-14T12:22:59.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s6a000zilogmbhal30j","content":"<p>　　一般使用情况下，类静态成员函数调用静态成员变量，不能调用非静态变量，否则编译器会出错。因为非静态成员属于类对象，只有在类对象的实例创建时，才会分配内存，然后通过对象进行访问；而静态成员属于整个类，不需要类对象的创建，此时使用静态成员访问非静态成员好比访问内存中不存在的东西。</p>\n<a id=\"more\"></a>\n<p>　　静态成员调用静态成员的一般方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CStatic</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;m_iTest&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m_iTest; <span class=\"comment\">//此处为静态成员变量声明</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> CStatic::m_iTest = <span class=\"number\">0</span>; <span class=\"comment\">// 此处为定义，必须定义，否则编译出错。此处亦可用 int CStatic::m_iTest; 代替</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CStatic cs;</span><br><span class=\"line\">    cs.Print();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　使用上述方式，有个问题，就是<strong>需要对静态成员变量预先在类外定义，若成员变量个数较多，逐个定义起来比较麻烦</strong>。此时，可使用静态成员调用非静态成员方法，<a href=\"http://www.cnblogs.com/rickyk/p/4238380.html\" target=\"_blank\" rel=\"noopener\">参见</a>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CStatic</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    CStatic()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_iTest = <span class=\"number\">0</span>;</span><br><span class=\"line\">        s_pInstance = <span class=\"keyword\">this</span>;   <span class=\"comment\">// 构造函数初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        s_pInstance-&gt;m_iTest += <span class=\"number\">1</span>;  <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;s_pInstance-&gt;m_iTest&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_iTest;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> CStatic* s_pInstance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">CStatic* CStatic::s_pInstance = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CStatic cs;   <span class=\"comment\">// 已加载到内存，构造函数中有参数this进行初始化（相当于c语言先定义变量，再调用函数）</span></span><br><span class=\"line\">    cs.Print();</span><br><span class=\"line\">    CStatic cs1;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>　　一般使用情况下，类静态成员函数调用静态成员变量，不能调用非静态变量，否则编译器会出错。因为非静态成员属于类对象，只有在类对象的实例创建时，才会分配内存，然后通过对象进行访问；而静态成员属于整个类，不需要类对象的创建，此时使用静态成员访问非静态成员好比访问内存中不存在的东西。</p>","more":"<p>　　静态成员调用静态成员的一般方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CStatic</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;m_iTest&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m_iTest; <span class=\"comment\">//此处为静态成员变量声明</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> CStatic::m_iTest = <span class=\"number\">0</span>; <span class=\"comment\">// 此处为定义，必须定义，否则编译出错。此处亦可用 int CStatic::m_iTest; 代替</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CStatic cs;</span><br><span class=\"line\">    cs.Print();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　使用上述方式，有个问题，就是<strong>需要对静态成员变量预先在类外定义，若成员变量个数较多，逐个定义起来比较麻烦</strong>。此时，可使用静态成员调用非静态成员方法，<a href=\"http://www.cnblogs.com/rickyk/p/4238380.html\" target=\"_blank\" rel=\"noopener\">参见</a>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CStatic</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    CStatic()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_iTest = <span class=\"number\">0</span>;</span><br><span class=\"line\">        s_pInstance = <span class=\"keyword\">this</span>;   <span class=\"comment\">// 构造函数初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        s_pInstance-&gt;m_iTest += <span class=\"number\">1</span>;  <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;s_pInstance-&gt;m_iTest&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_iTest;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> CStatic* s_pInstance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">CStatic* CStatic::s_pInstance = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CStatic cs;   <span class=\"comment\">// 已加载到内存，构造函数中有参数this进行初始化（相当于c语言先定义变量，再调用函数）</span></span><br><span class=\"line\">    cs.Print();</span><br><span class=\"line\">    CStatic cs1;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"静态成员函数调用非静态成员变量","path":"2017/02/07/static-class-func-var/","eyeCatchImage":null,"excerpt":"<p>　　一般使用情况下，类静态成员函数调用静态成员变量，不能调用非静态变量，否则编译器会出错。因为非静态成员属于类对象，只有在类对象的实例创建时，才会分配内存，然后通过对象进行访问；而静态成员属于整个类，不需要类对象的创建，此时使用静态成员访问非静态成员好比访问内存中不存在的东西。</p>","date":"2017-02-07T08:14:49.000Z","pv":0,"totalPV":0,"categories":"c++","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"svm","date":"2017-02-14T11:25:32.000Z","mathjax":true,"_content":"","source":"_posts/svm.md","raw":"---\ntitle: svm\ndate: 2017-02-14 19:25:32\ntags: [svm, math, machine learning]\ncategories: machine learning\nmathjax: true\n---\n","slug":"svm","published":1,"updated":"2018-12-14T12:22:59.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s6b0012iloglqcn89h3","content":"","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"svm","path":"2017/02/14/svm/","eyeCatchImage":null,"excerpt":null,"date":"2017-02-14T11:25:32.000Z","pv":0,"totalPV":0,"categories":"machine learning","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"strategy模式","date":"2017-08-14T11:39:59.000Z","_content":"\n如果代码中存在变化可扩展的 if...else 逻辑的硬编码，当新增一种逻辑分支时，须修改源码适配，维护较为困难。此时可通过该策略模式来解决。\n\n<!-- more -->\n详细介绍，可参见。\n[策略模式](http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/strategy.html)\n\n注意：关键词 变化，可扩展（此处条件判断分支，随需求变化，需不断扩展条件分支情形；如果条件语句固定，如一周7天，此时无需使用该模式）\n\n```C++\n/*************************************************************************\n\t> File Name: main.cpp\n\t> Author: ma6174\n\t> Mail: ma6174@163.com\n\t> Created Time: Mon 14 Aug 2017 05:10:06 AM PDT\n ************************************************************************/\n#include \"Strategy.h\"\n#include \"Context.h\"\n#include \"ConcreteStrategyA.h\"\n#include \"ConcreteStrategyB.h\"\n#include<iostream>\nusing namespace std;\n\nint main()\n{\n\tConcreteStrategyA *pCSA = new ConcreteStrategyA();\n\tConcreteStrategyB *pCSB = new ConcreteStrategyB();\n\n\tContext *pContext = new Context();\n\tpContext->SetStrategy(pCSA);\n\tpContext->Algorithm();\n\n\tpContext->SetStrategy(pCSB);\n\tpContext->Algorithm();\n\n\tdelete pCSA;\n\tdelete pCSB;\n\tdelete pContext;\n\n\treturn 0;\n}\n\n/*************************************************************************\n\t> File Name: Context.h\n\t> Author: ma6174\n\t> Mail: ma6174@163.com\n\t> Created Time: Mon 14 Aug 2017 05:06:44 AM PDT\n ************************************************************************/\n#ifndef __CONTEXT__H__\n#define __CONTEXT__H__\n\n#include \"Strategy.h\"\n#include<iostream>\nusing namespace std;\n\nclass Context\n{\npublic:\n\tvoid SetStrategy(Strategy* cStrategy)\n\t{\n\t\tm_cStrategy = cStrategy;\n\t}\n\tvoid Algorithm()\n\t{\n\t\tm_cStrategy->Algorithm();\n\t}\n\nprivate:\n\tStrategy *m_cStrategy;\n};\n#endif\n\n\n/*************************************************************************\n\t> File Name: Strategy.h\n\t> Author: ma6174\n\t> Mail: ma6174@163.com\n\t> Created Time: Mon 14 Aug 2017 05:02:15 AM PDT\n ************************************************************************/\n#ifndef __STRATEGY__H\n#define __STRATEGY__H\n\n#include<iostream>\nusing namespace std;\n\nclass Strategy\n{\npublic:\n\tvirtual ~Strategy(){}\n\tvirtual void Algorithm() = 0;\n\n};\n\n#endif\n\n\n/*************************************************************************\n\t> File Name: ConcreteStrategyA.h\n\t> Author: ma6174\n\t> Mail: ma6174@163.com\n\t> Created Time: Mon 14 Aug 2017 05:03:31 AM PDT\n ************************************************************************/\n#ifndef __ConcreteStategy__H__\n#define __ConcreteStategy__H__\n\n#include \"Strategy.h\"\n#include<iostream>\nusing namespace std;\n\nclass ConcreteStrategyA:public Strategy\n{\npublic:\n\tvirtual ~ConcreteStrategyA(){}\n\tvirtual void Algorithm()\n\t{\n\t\tcout<<\"ConcreteStrategyA.\"<<endl;\n\t}\n};\n\n#endif\n\n```\n","source":"_posts/strategy-li.md","raw":"---\ntitle: strategy模式\ndate: 2017-08-14 19:39:59\ntags: [设计模式, 李建中]\ncategories: 设计模式\n---\n\n如果代码中存在变化可扩展的 if...else 逻辑的硬编码，当新增一种逻辑分支时，须修改源码适配，维护较为困难。此时可通过该策略模式来解决。\n\n<!-- more -->\n详细介绍，可参见。\n[策略模式](http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/strategy.html)\n\n注意：关键词 变化，可扩展（此处条件判断分支，随需求变化，需不断扩展条件分支情形；如果条件语句固定，如一周7天，此时无需使用该模式）\n\n```C++\n/*************************************************************************\n\t> File Name: main.cpp\n\t> Author: ma6174\n\t> Mail: ma6174@163.com\n\t> Created Time: Mon 14 Aug 2017 05:10:06 AM PDT\n ************************************************************************/\n#include \"Strategy.h\"\n#include \"Context.h\"\n#include \"ConcreteStrategyA.h\"\n#include \"ConcreteStrategyB.h\"\n#include<iostream>\nusing namespace std;\n\nint main()\n{\n\tConcreteStrategyA *pCSA = new ConcreteStrategyA();\n\tConcreteStrategyB *pCSB = new ConcreteStrategyB();\n\n\tContext *pContext = new Context();\n\tpContext->SetStrategy(pCSA);\n\tpContext->Algorithm();\n\n\tpContext->SetStrategy(pCSB);\n\tpContext->Algorithm();\n\n\tdelete pCSA;\n\tdelete pCSB;\n\tdelete pContext;\n\n\treturn 0;\n}\n\n/*************************************************************************\n\t> File Name: Context.h\n\t> Author: ma6174\n\t> Mail: ma6174@163.com\n\t> Created Time: Mon 14 Aug 2017 05:06:44 AM PDT\n ************************************************************************/\n#ifndef __CONTEXT__H__\n#define __CONTEXT__H__\n\n#include \"Strategy.h\"\n#include<iostream>\nusing namespace std;\n\nclass Context\n{\npublic:\n\tvoid SetStrategy(Strategy* cStrategy)\n\t{\n\t\tm_cStrategy = cStrategy;\n\t}\n\tvoid Algorithm()\n\t{\n\t\tm_cStrategy->Algorithm();\n\t}\n\nprivate:\n\tStrategy *m_cStrategy;\n};\n#endif\n\n\n/*************************************************************************\n\t> File Name: Strategy.h\n\t> Author: ma6174\n\t> Mail: ma6174@163.com\n\t> Created Time: Mon 14 Aug 2017 05:02:15 AM PDT\n ************************************************************************/\n#ifndef __STRATEGY__H\n#define __STRATEGY__H\n\n#include<iostream>\nusing namespace std;\n\nclass Strategy\n{\npublic:\n\tvirtual ~Strategy(){}\n\tvirtual void Algorithm() = 0;\n\n};\n\n#endif\n\n\n/*************************************************************************\n\t> File Name: ConcreteStrategyA.h\n\t> Author: ma6174\n\t> Mail: ma6174@163.com\n\t> Created Time: Mon 14 Aug 2017 05:03:31 AM PDT\n ************************************************************************/\n#ifndef __ConcreteStategy__H__\n#define __ConcreteStategy__H__\n\n#include \"Strategy.h\"\n#include<iostream>\nusing namespace std;\n\nclass ConcreteStrategyA:public Strategy\n{\npublic:\n\tvirtual ~ConcreteStrategyA(){}\n\tvirtual void Algorithm()\n\t{\n\t\tcout<<\"ConcreteStrategyA.\"<<endl;\n\t}\n};\n\n#endif\n\n```\n","slug":"strategy-li","published":1,"updated":"2018-12-14T12:22:59.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s6c0014ilog9b7i51jr","content":"<p>如果代码中存在变化可扩展的 if…else 逻辑的硬编码，当新增一种逻辑分支时，须修改源码适配，维护较为困难。此时可通过该策略模式来解决。</p>\n<a id=\"more\"></a>\n<p>详细介绍，可参见。<br><a href=\"http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/strategy.html\" target=\"_blank\" rel=\"noopener\">策略模式</a></p>\n<p>注意：关键词 变化，可扩展（此处条件判断分支，随需求变化，需不断扩展条件分支情形；如果条件语句固定，如一周7天，此时无需使用该模式）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; File Name: main.cpp</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Author: ma6174</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Mail: ma6174@163.com</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Created Time: Mon 14 Aug 2017 05:10:06 AM PDT</span></span><br><span class=\"line\"><span class=\"comment\"> ************************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Strategy.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Context.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ConcreteStrategyA.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ConcreteStrategyB.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tConcreteStrategyA *pCSA = <span class=\"keyword\">new</span> ConcreteStrategyA();</span><br><span class=\"line\">\tConcreteStrategyB *pCSB = <span class=\"keyword\">new</span> ConcreteStrategyB();</span><br><span class=\"line\"></span><br><span class=\"line\">\tContext *pContext = <span class=\"keyword\">new</span> Context();</span><br><span class=\"line\">\tpContext-&gt;SetStrategy(pCSA);</span><br><span class=\"line\">\tpContext-&gt;Algorithm();</span><br><span class=\"line\"></span><br><span class=\"line\">\tpContext-&gt;SetStrategy(pCSB);</span><br><span class=\"line\">\tpContext-&gt;Algorithm();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> pCSA;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> pCSB;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> pContext;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; File Name: Context.h</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Author: ma6174</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Mail: ma6174@163.com</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Created Time: Mon 14 Aug 2017 05:06:44 AM PDT</span></span><br><span class=\"line\"><span class=\"comment\"> ************************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __CONTEXT__H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __CONTEXT__H__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Strategy.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetStrategy</span><span class=\"params\">(Strategy* cStrategy)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_cStrategy = cStrategy;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Algorithm</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_cStrategy-&gt;Algorithm();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tStrategy *m_cStrategy;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; File Name: Strategy.h</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Author: ma6174</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Mail: ma6174@163.com</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Created Time: Mon 14 Aug 2017 05:02:15 AM PDT</span></span><br><span class=\"line\"><span class=\"comment\"> ************************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __STRATEGY__H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __STRATEGY__H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Strategy</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~Strategy()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Algorithm</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; File Name: ConcreteStrategyA.h</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Author: ma6174</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Mail: ma6174@163.com</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Created Time: Mon 14 Aug 2017 05:03:31 AM PDT</span></span><br><span class=\"line\"><span class=\"comment\"> ************************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __ConcreteStategy__H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __ConcreteStategy__H__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Strategy.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyA</span>:</span><span class=\"keyword\">public</span> Strategy</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~ConcreteStrategyA()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Algorithm</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"ConcreteStrategyA.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>如果代码中存在变化可扩展的 if…else 逻辑的硬编码，当新增一种逻辑分支时，须修改源码适配，维护较为困难。此时可通过该策略模式来解决。</p>","more":"<p>详细介绍，可参见。<br><a href=\"http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/strategy.html\" target=\"_blank\" rel=\"noopener\">策略模式</a></p>\n<p>注意：关键词 变化，可扩展（此处条件判断分支，随需求变化，需不断扩展条件分支情形；如果条件语句固定，如一周7天，此时无需使用该模式）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; File Name: main.cpp</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Author: ma6174</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Mail: ma6174@163.com</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Created Time: Mon 14 Aug 2017 05:10:06 AM PDT</span></span><br><span class=\"line\"><span class=\"comment\"> ************************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Strategy.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Context.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ConcreteStrategyA.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ConcreteStrategyB.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tConcreteStrategyA *pCSA = <span class=\"keyword\">new</span> ConcreteStrategyA();</span><br><span class=\"line\">\tConcreteStrategyB *pCSB = <span class=\"keyword\">new</span> ConcreteStrategyB();</span><br><span class=\"line\"></span><br><span class=\"line\">\tContext *pContext = <span class=\"keyword\">new</span> Context();</span><br><span class=\"line\">\tpContext-&gt;SetStrategy(pCSA);</span><br><span class=\"line\">\tpContext-&gt;Algorithm();</span><br><span class=\"line\"></span><br><span class=\"line\">\tpContext-&gt;SetStrategy(pCSB);</span><br><span class=\"line\">\tpContext-&gt;Algorithm();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> pCSA;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> pCSB;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> pContext;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; File Name: Context.h</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Author: ma6174</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Mail: ma6174@163.com</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Created Time: Mon 14 Aug 2017 05:06:44 AM PDT</span></span><br><span class=\"line\"><span class=\"comment\"> ************************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __CONTEXT__H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __CONTEXT__H__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Strategy.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetStrategy</span><span class=\"params\">(Strategy* cStrategy)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_cStrategy = cStrategy;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Algorithm</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_cStrategy-&gt;Algorithm();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tStrategy *m_cStrategy;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; File Name: Strategy.h</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Author: ma6174</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Mail: ma6174@163.com</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Created Time: Mon 14 Aug 2017 05:02:15 AM PDT</span></span><br><span class=\"line\"><span class=\"comment\"> ************************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __STRATEGY__H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __STRATEGY__H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Strategy</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~Strategy()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Algorithm</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; File Name: ConcreteStrategyA.h</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Author: ma6174</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Mail: ma6174@163.com</span></span><br><span class=\"line\"><span class=\"comment\">\t&gt; Created Time: Mon 14 Aug 2017 05:03:31 AM PDT</span></span><br><span class=\"line\"><span class=\"comment\"> ************************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __ConcreteStategy__H__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __ConcreteStategy__H__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Strategy.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyA</span>:</span><span class=\"keyword\">public</span> Strategy</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~ConcreteStrategyA()&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Algorithm</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"ConcreteStrategyA.\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"strategy模式","path":"2017/08/14/strategy-li/","eyeCatchImage":null,"excerpt":"<p>如果代码中存在变化可扩展的 if…else 逻辑的硬编码，当新增一种逻辑分支时，须修改源码适配，维护较为困难。此时可通过该策略模式来解决。</p>","date":"2017-08-14T11:39:59.000Z","pv":0,"totalPV":0,"categories":"设计模式","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"template method 模式","date":"2017-08-14T11:40:18.000Z","_content":"","source":"_posts/template-method-li.md","raw":"---\ntitle: template method 模式\ndate: 2017-08-14 19:40:18\ntags: [设计模式, 李建中]\ncategories: 设计模式\n---\n","slug":"template-method-li","published":1,"updated":"2018-12-14T12:22:59.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s6d0017ilogfcyuuuer","content":"","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"template method 模式","path":"2017/08/14/template-method-li/","eyeCatchImage":null,"excerpt":null,"date":"2017-08-14T11:40:18.000Z","pv":0,"totalPV":0,"categories":"设计模式","internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"yara进程扫描api","date":"2017-02-14T15:26:29.000Z","_content":"\n　　[yara](https://github.com/VirusTotal/yara) 是一款开源匹配工具，使用其独特的规则语法用于信息匹配，yara规则可以用于文件及进程信息匹配。\n　　其中，扫描进程api：\n　　YR_API int **yr_rules_scan_proc**(YR_RULES* rules, int pid, int flags, YR_CALLBACK_FUNC callback, void* user_data, int timeout);\n<!-- more -->\n\n　　该接口中使用 ptrace 追踪子进程内存数据，通过使用ptrace(PTRACE_ATTACH, pid, NULL, 0),读取[/proc/pid/mem](http://www.tuicool.com/articles/nUZRBrn)以获取进程数据，ptrace默认会发送[SIGSTOP](http://www.man7.org/linux/man-pages/man2/ptrace.2.html)信号给tracee进程，使该进程处于暂停的僵死状态，（类似ctrl + z 命令，通过命令bg使其后台继续运行，fg使其转入前台运行）,读完数据之后调用ptrace(PTRACE_DETACH, pid,  NULL, 0)使得被扫描进程继续执行。\n\n注意：\n* 如果扫描非自身进程内存内容，必须使用ptrace才行，类似：\n```C++\nsprintf( buf, \"/proc/%d/mem\" , pid );\nfd = open( buf, O_RDONLY );\nptrace( PTRACE_ATTACH, pid, NULL, NULL );\nwaitpid( pid, NULL, 0 );\nlseek( fd, offset, SEEK_SET );\nread( fd, buf, sizeof(buf) );\nptrace( PTRACE_DETACH, pid, NULL, NULL);\n```\n\n* 如果使用该接口扫描进程数据，发送SIGSTOP之后立即退出而不使用PTRACE_DETACH，则会导致被扫描进程处于僵死状态。类似find 命令执行操作时，使用ctrl + z，使用bg使得命令恢复:\n![](yr-rules-scan-proc/abc0000000006.png)\n\n\nyr_rules_scan_proc接口实现如下：\n```C++\nYR_API int yr_rules_scan_proc(\n    YR_RULES* rules,\n    int pid,\n    int flags,\n    YR_CALLBACK_FUNC callback,\n    void* user_data,\n    int timeout)\n{\n  YR_MEMORY_BLOCK_ITERATOR iterator;\n\n  int result = yr_process_open_iterator(\n      pid,\n      &iterator);   // 此处调用_yr_process_attach\n\n  if (result == ERROR_SUCCESS)\n  {\n    result = yr_rules_scan_mem_blocks(\n        rules,\n        &iterator,\n        flags | SCAN_FLAGS_PROCESS_MEMORY,\n        callback,\n        user_data,\n        timeout);\n\n    yr_process_close_iterator(&iterator);  // 此处调用_yr_process_detach\n  }\n\n  return result;\n}\n\nint _yr_process_attach(\n    int pid,\n    YR_PROC_ITERATOR_CTX* context)\n{\n  char buffer[256];\n\n  context->pid = pid;\n  context->maps = NULL;\n  context->mem_fd = -1;\n\n  snprintf(buffer, sizeof(buffer), \"/proc/%u/maps\", pid);\n  context->maps = fopen(buffer, \"r\");\n\n  if (context->maps == NULL)\n    return ERROR_COULD_NOT_ATTACH_TO_PROCESS;\n\n  snprintf(buffer, sizeof(buffer), \"/proc/%u/mem\", pid);\n  context->mem_fd = open(buffer, O_RDONLY);\n\n  if (context->mem_fd == -1)\n  {\n    fclose(context->maps);\n    context->maps = NULL;\n\n    return ERROR_COULD_NOT_ATTACH_TO_PROCESS;\n  }\n\n  if (ptrace(PTRACE_ATTACH, pid, NULL, 0) == -1)\n  {\n    fclose(context->maps);\n    context->maps = NULL;\n\n    close(context->mem_fd);\n    context->mem_fd = -1;\n\n    return ERROR_COULD_NOT_ATTACH_TO_PROCESS;\n  }\n\n  return ERROR_SUCCESS;\n}\n\nint _yr_process_detach(\n    YR_PROC_ITERATOR_CTX* context)\n{\n  fclose(context->maps);\n  close(context->mem_fd);\n  ptrace(PTRACE_DETACH, context->pid, NULL, 0);\n\n  return ERROR_SUCCESS;\n}\n\n```\n","source":"_posts/yr-rules-scan-proc.md","raw":"---\ntitle: yara进程扫描api\ndate: 2017-02-14 23:26:29\ntags: [c, yara, proc, api]\ncategories: c\n---\n\n　　[yara](https://github.com/VirusTotal/yara) 是一款开源匹配工具，使用其独特的规则语法用于信息匹配，yara规则可以用于文件及进程信息匹配。\n　　其中，扫描进程api：\n　　YR_API int **yr_rules_scan_proc**(YR_RULES* rules, int pid, int flags, YR_CALLBACK_FUNC callback, void* user_data, int timeout);\n<!-- more -->\n\n　　该接口中使用 ptrace 追踪子进程内存数据，通过使用ptrace(PTRACE_ATTACH, pid, NULL, 0),读取[/proc/pid/mem](http://www.tuicool.com/articles/nUZRBrn)以获取进程数据，ptrace默认会发送[SIGSTOP](http://www.man7.org/linux/man-pages/man2/ptrace.2.html)信号给tracee进程，使该进程处于暂停的僵死状态，（类似ctrl + z 命令，通过命令bg使其后台继续运行，fg使其转入前台运行）,读完数据之后调用ptrace(PTRACE_DETACH, pid,  NULL, 0)使得被扫描进程继续执行。\n\n注意：\n* 如果扫描非自身进程内存内容，必须使用ptrace才行，类似：\n```C++\nsprintf( buf, \"/proc/%d/mem\" , pid );\nfd = open( buf, O_RDONLY );\nptrace( PTRACE_ATTACH, pid, NULL, NULL );\nwaitpid( pid, NULL, 0 );\nlseek( fd, offset, SEEK_SET );\nread( fd, buf, sizeof(buf) );\nptrace( PTRACE_DETACH, pid, NULL, NULL);\n```\n\n* 如果使用该接口扫描进程数据，发送SIGSTOP之后立即退出而不使用PTRACE_DETACH，则会导致被扫描进程处于僵死状态。类似find 命令执行操作时，使用ctrl + z，使用bg使得命令恢复:\n![](yr-rules-scan-proc/abc0000000006.png)\n\n\nyr_rules_scan_proc接口实现如下：\n```C++\nYR_API int yr_rules_scan_proc(\n    YR_RULES* rules,\n    int pid,\n    int flags,\n    YR_CALLBACK_FUNC callback,\n    void* user_data,\n    int timeout)\n{\n  YR_MEMORY_BLOCK_ITERATOR iterator;\n\n  int result = yr_process_open_iterator(\n      pid,\n      &iterator);   // 此处调用_yr_process_attach\n\n  if (result == ERROR_SUCCESS)\n  {\n    result = yr_rules_scan_mem_blocks(\n        rules,\n        &iterator,\n        flags | SCAN_FLAGS_PROCESS_MEMORY,\n        callback,\n        user_data,\n        timeout);\n\n    yr_process_close_iterator(&iterator);  // 此处调用_yr_process_detach\n  }\n\n  return result;\n}\n\nint _yr_process_attach(\n    int pid,\n    YR_PROC_ITERATOR_CTX* context)\n{\n  char buffer[256];\n\n  context->pid = pid;\n  context->maps = NULL;\n  context->mem_fd = -1;\n\n  snprintf(buffer, sizeof(buffer), \"/proc/%u/maps\", pid);\n  context->maps = fopen(buffer, \"r\");\n\n  if (context->maps == NULL)\n    return ERROR_COULD_NOT_ATTACH_TO_PROCESS;\n\n  snprintf(buffer, sizeof(buffer), \"/proc/%u/mem\", pid);\n  context->mem_fd = open(buffer, O_RDONLY);\n\n  if (context->mem_fd == -1)\n  {\n    fclose(context->maps);\n    context->maps = NULL;\n\n    return ERROR_COULD_NOT_ATTACH_TO_PROCESS;\n  }\n\n  if (ptrace(PTRACE_ATTACH, pid, NULL, 0) == -1)\n  {\n    fclose(context->maps);\n    context->maps = NULL;\n\n    close(context->mem_fd);\n    context->mem_fd = -1;\n\n    return ERROR_COULD_NOT_ATTACH_TO_PROCESS;\n  }\n\n  return ERROR_SUCCESS;\n}\n\nint _yr_process_detach(\n    YR_PROC_ITERATOR_CTX* context)\n{\n  fclose(context->maps);\n  close(context->mem_fd);\n  ptrace(PTRACE_DETACH, context->pid, NULL, 0);\n\n  return ERROR_SUCCESS;\n}\n\n```\n","slug":"yr-rules-scan-proc","published":1,"updated":"2018-12-14T12:22:59.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpo07s6e001bilogk9k2vjc1","content":"<p>　　<a href=\"https://github.com/VirusTotal/yara\" target=\"_blank\" rel=\"noopener\">yara</a> 是一款开源匹配工具，使用其独特的规则语法用于信息匹配，yara规则可以用于文件及进程信息匹配。<br>　　其中，扫描进程api：<br>　　YR_API int <strong>yr_rules_scan_proc</strong>(YR_RULES<em> rules, int pid, int flags, YR_CALLBACK_FUNC callback, void</em> user_data, int timeout);<br><a id=\"more\"></a></p>\n<p>　　该接口中使用 ptrace 追踪子进程内存数据，通过使用ptrace(PTRACE_ATTACH, pid, NULL, 0),读取<a href=\"http://www.tuicool.com/articles/nUZRBrn\" target=\"_blank\" rel=\"noopener\">/proc/pid/mem</a>以获取进程数据，ptrace默认会发送<a href=\"http://www.man7.org/linux/man-pages/man2/ptrace.2.html\" target=\"_blank\" rel=\"noopener\">SIGSTOP</a>信号给tracee进程，使该进程处于暂停的僵死状态，（类似ctrl + z 命令，通过命令bg使其后台继续运行，fg使其转入前台运行）,读完数据之后调用ptrace(PTRACE_DETACH, pid,  NULL, 0)使得被扫描进程继续执行。</p>\n<p>注意：</p>\n<ul>\n<li><p>如果扫描非自身进程内存内容，必须使用ptrace才行，类似：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sprintf</span>( buf, <span class=\"string\">\"/proc/%d/mem\"</span> , pid );</span><br><span class=\"line\">fd = open( buf, O_RDONLY );</span><br><span class=\"line\">ptrace( PTRACE_ATTACH, pid, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span> );</span><br><span class=\"line\">waitpid( pid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span> );</span><br><span class=\"line\">lseek( fd, offset, SEEK_SET );</span><br><span class=\"line\">read( fd, buf, <span class=\"keyword\">sizeof</span>(buf) );</span><br><span class=\"line\">ptrace( PTRACE_DETACH, pid, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果使用该接口扫描进程数据，发送SIGSTOP之后立即退出而不使用PTRACE_DETACH，则会导致被扫描进程处于僵死状态。类似find 命令执行操作时，使用ctrl + z，使用bg使得命令恢复:<br><img src=\"/2017/02/14/yr-rules-scan-proc/abc0000000006.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>yr_rules_scan_proc接口实现如下：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">YR_API <span class=\"keyword\">int</span> <span class=\"title\">yr_rules_scan_proc</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    YR_RULES* rules,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> pid,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> flags,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    YR_CALLBACK_FUNC callback,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">void</span>* user_data,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> timeout)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  YR_MEMORY_BLOCK_ITERATOR iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> result = yr_process_open_iterator(</span><br><span class=\"line\">      pid,</span><br><span class=\"line\">      &amp;iterator);   <span class=\"comment\">// 此处调用_yr_process_attach</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result == ERROR_SUCCESS)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    result = yr_rules_scan_mem_blocks(</span><br><span class=\"line\">        rules,</span><br><span class=\"line\">        &amp;iterator,</span><br><span class=\"line\">        flags | SCAN_FLAGS_PROCESS_MEMORY,</span><br><span class=\"line\">        callback,</span><br><span class=\"line\">        user_data,</span><br><span class=\"line\">        timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">    yr_process_close_iterator(&amp;iterator);  <span class=\"comment\">// 此处调用_yr_process_detach</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> _yr_process_attach(</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pid,</span><br><span class=\"line\">    YR_PROC_ITERATOR_CTX* context)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> buffer[<span class=\"number\">256</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  context-&gt;pid = pid;</span><br><span class=\"line\">  context-&gt;maps = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  context-&gt;mem_fd = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">snprintf</span>(buffer, <span class=\"keyword\">sizeof</span>(buffer), <span class=\"string\">\"/proc/%u/maps\"</span>, pid);</span><br><span class=\"line\">  context-&gt;maps = fopen(buffer, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (context-&gt;maps == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ERROR_COULD_NOT_ATTACH_TO_PROCESS;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">snprintf</span>(buffer, <span class=\"keyword\">sizeof</span>(buffer), <span class=\"string\">\"/proc/%u/mem\"</span>, pid);</span><br><span class=\"line\">  context-&gt;mem_fd = open(buffer, O_RDONLY);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (context-&gt;mem_fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    fclose(context-&gt;maps);</span><br><span class=\"line\">    context-&gt;maps = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ERROR_COULD_NOT_ATTACH_TO_PROCESS;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ptrace(PTRACE_ATTACH, pid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    fclose(context-&gt;maps);</span><br><span class=\"line\">    context-&gt;maps = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    close(context-&gt;mem_fd);</span><br><span class=\"line\">    context-&gt;mem_fd = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ERROR_COULD_NOT_ATTACH_TO_PROCESS;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ERROR_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> _yr_process_detach(</span><br><span class=\"line\">    YR_PROC_ITERATOR_CTX* context)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  fclose(context-&gt;maps);</span><br><span class=\"line\">  close(context-&gt;mem_fd);</span><br><span class=\"line\">  ptrace(PTRACE_DETACH, context-&gt;pid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ERROR_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>　　<a href=\"https://github.com/VirusTotal/yara\" target=\"_blank\" rel=\"noopener\">yara</a> 是一款开源匹配工具，使用其独特的规则语法用于信息匹配，yara规则可以用于文件及进程信息匹配。<br>　　其中，扫描进程api：<br>　　YR_API int <strong>yr_rules_scan_proc</strong>(YR_RULES<em> rules, int pid, int flags, YR_CALLBACK_FUNC callback, void</em> user_data, int timeout);<br></p>","more":"<p></p>\n<p>　　该接口中使用 ptrace 追踪子进程内存数据，通过使用ptrace(PTRACE_ATTACH, pid, NULL, 0),读取<a href=\"http://www.tuicool.com/articles/nUZRBrn\" target=\"_blank\" rel=\"noopener\">/proc/pid/mem</a>以获取进程数据，ptrace默认会发送<a href=\"http://www.man7.org/linux/man-pages/man2/ptrace.2.html\" target=\"_blank\" rel=\"noopener\">SIGSTOP</a>信号给tracee进程，使该进程处于暂停的僵死状态，（类似ctrl + z 命令，通过命令bg使其后台继续运行，fg使其转入前台运行）,读完数据之后调用ptrace(PTRACE_DETACH, pid,  NULL, 0)使得被扫描进程继续执行。</p>\n<p>注意：</p>\n<ul>\n<li><p>如果扫描非自身进程内存内容，必须使用ptrace才行，类似：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sprintf</span>( buf, <span class=\"string\">\"/proc/%d/mem\"</span> , pid );</span><br><span class=\"line\">fd = open( buf, O_RDONLY );</span><br><span class=\"line\">ptrace( PTRACE_ATTACH, pid, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span> );</span><br><span class=\"line\">waitpid( pid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span> );</span><br><span class=\"line\">lseek( fd, offset, SEEK_SET );</span><br><span class=\"line\">read( fd, buf, <span class=\"keyword\">sizeof</span>(buf) );</span><br><span class=\"line\">ptrace( PTRACE_DETACH, pid, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果使用该接口扫描进程数据，发送SIGSTOP之后立即退出而不使用PTRACE_DETACH，则会导致被扫描进程处于僵死状态。类似find 命令执行操作时，使用ctrl + z，使用bg使得命令恢复:<br><img src=\"/2017/02/14/yr-rules-scan-proc/abc0000000006.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>yr_rules_scan_proc接口实现如下：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">YR_API <span class=\"keyword\">int</span> <span class=\"title\">yr_rules_scan_proc</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    YR_RULES* rules,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> pid,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> flags,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    YR_CALLBACK_FUNC callback,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">void</span>* user_data,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> timeout)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  YR_MEMORY_BLOCK_ITERATOR iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> result = yr_process_open_iterator(</span><br><span class=\"line\">      pid,</span><br><span class=\"line\">      &amp;iterator);   <span class=\"comment\">// 此处调用_yr_process_attach</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result == ERROR_SUCCESS)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    result = yr_rules_scan_mem_blocks(</span><br><span class=\"line\">        rules,</span><br><span class=\"line\">        &amp;iterator,</span><br><span class=\"line\">        flags | SCAN_FLAGS_PROCESS_MEMORY,</span><br><span class=\"line\">        callback,</span><br><span class=\"line\">        user_data,</span><br><span class=\"line\">        timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">    yr_process_close_iterator(&amp;iterator);  <span class=\"comment\">// 此处调用_yr_process_detach</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> _yr_process_attach(</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pid,</span><br><span class=\"line\">    YR_PROC_ITERATOR_CTX* context)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> buffer[<span class=\"number\">256</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  context-&gt;pid = pid;</span><br><span class=\"line\">  context-&gt;maps = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  context-&gt;mem_fd = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">snprintf</span>(buffer, <span class=\"keyword\">sizeof</span>(buffer), <span class=\"string\">\"/proc/%u/maps\"</span>, pid);</span><br><span class=\"line\">  context-&gt;maps = fopen(buffer, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (context-&gt;maps == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ERROR_COULD_NOT_ATTACH_TO_PROCESS;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">snprintf</span>(buffer, <span class=\"keyword\">sizeof</span>(buffer), <span class=\"string\">\"/proc/%u/mem\"</span>, pid);</span><br><span class=\"line\">  context-&gt;mem_fd = open(buffer, O_RDONLY);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (context-&gt;mem_fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    fclose(context-&gt;maps);</span><br><span class=\"line\">    context-&gt;maps = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ERROR_COULD_NOT_ATTACH_TO_PROCESS;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ptrace(PTRACE_ATTACH, pid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    fclose(context-&gt;maps);</span><br><span class=\"line\">    context-&gt;maps = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    close(context-&gt;mem_fd);</span><br><span class=\"line\">    context-&gt;mem_fd = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ERROR_COULD_NOT_ATTACH_TO_PROCESS;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ERROR_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> _yr_process_detach(</span><br><span class=\"line\">    YR_PROC_ITERATOR_CTX* context)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  fclose(context-&gt;maps);</span><br><span class=\"line\">  close(context-&gt;mem_fd);</span><br><span class=\"line\">  ptrace(PTRACE_DETACH, context-&gt;pid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ERROR_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Dec 14 2018 20:22:59 GMT+0800 (China Standard Time)","title":"yara进程扫描api","path":"2017/02/14/yr-rules-scan-proc/","eyeCatchImage":null,"excerpt":"<p>　　<a href=\"https://github.com/VirusTotal/yara\" target=\"_blank\" rel=\"noopener\">yara</a> 是一款开源匹配工具，使用其独特的规则语法用于信息匹配，yara规则可以用于文件及进程信息匹配。<br>　　其中，扫描进程api：<br>　　YR_API int <strong>yr_rules_scan_proc</strong>(YR_RULES<em> rules, int pid, int flags, YR_CALLBACK_FUNC callback, void</em> user_data, int timeout);<br></p>","date":"2017-02-14T15:26:29.000Z","pv":0,"totalPV":0,"categories":"c","internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[{"_id":"source/_posts/dns/abc0000000001.png","slug":"abc0000000001.png","post":"cjpo07s5t000bilogy3ei8tkk","modified":0,"renderable":0},{"_id":"source/_posts/singleton/abc0000000007.png","slug":"abc0000000007.png","post":"cjpo07s69000xilogihw0o9s7","modified":0,"renderable":0},{"_id":"source/_posts/yr-rules-scan-proc/abc0000000006.png","slug":"abc0000000006.png","post":"cjpo07s6e001bilogk9k2vjc1","modified":0,"renderable":0},{"_id":"source/_posts/cpp-type/Selection_001.png","slug":"Selection_001.png","post":"cjpo07s5q0005ilogymnn7xg4","modified":0,"renderable":0},{"_id":"source/_posts/cpp-type/Selection_002.png","slug":"Selection_002.png","post":"cjpo07s5q0005ilogymnn7xg4","modified":0,"renderable":0},{"_id":"source/_posts/cpp-type/Selection_003.png","slug":"Selection_003.png","post":"cjpo07s5q0005ilogymnn7xg4","modified":0,"renderable":0},{"_id":"source/_posts/dns/abc0000000000.png","slug":"abc0000000000.png","post":"cjpo07s5t000bilogy3ei8tkk","modified":0,"renderable":0},{"_id":"source/_posts/dns/abc0000000002.png","slug":"abc0000000002.png","post":"cjpo07s5t000bilogy3ei8tkk","modified":0,"renderable":0},{"_id":"source/_posts/dns/abc0000000003.png","slug":"abc0000000003.png","post":"cjpo07s5t000bilogy3ei8tkk","modified":0,"renderable":0},{"_id":"source/_posts/dns/abc0000000004.png","slug":"abc0000000004.png","post":"cjpo07s5t000bilogy3ei8tkk","modified":0,"renderable":0},{"_id":"source/_posts/dns/abc0000000005.png","slug":"abc0000000005.png","post":"cjpo07s5t000bilogy3ei8tkk","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjpo07s5k0000ilogvg78pm3g","category_id":"cjpo07s5p0003ilog472urd0w","_id":"cjpo07s5y000dilog70tqdy53"},{"post_id":"cjpo07s5n0002ilog04ar618x","category_id":"cjpo07s5t0008ilogy69nsmlq","_id":"cjpo07s62000kilogy9ta8cm5"},{"post_id":"cjpo07s5q0005ilogymnn7xg4","category_id":"cjpo07s5t0008ilogy69nsmlq","_id":"cjpo07s65000qilog2ifwao0h"},{"post_id":"cjpo07s5s0007ilogtkhz2hg3","category_id":"cjpo07s5t0008ilogy69nsmlq","_id":"cjpo07s69000vilog5at5xa6o"},{"post_id":"cjpo07s5t000bilogy3ei8tkk","category_id":"cjpo07s64000pilogz9iqr1of","_id":"cjpo07s6a0010ilog83s2yjoa"},{"post_id":"cjpo07s5z000gilogn29z4ojp","category_id":"cjpo07s69000wilog59xhda99","_id":"cjpo07s6c0016ilog3w1p368i"},{"post_id":"cjpo07s61000iilogqa7bytpa","category_id":"cjpo07s6a0011ilog0w9p0hr9","_id":"cjpo07s6e001cilogb13lt3vu"},{"post_id":"cjpo07s6e001bilogk9k2vjc1","category_id":"cjpo07s6a0011ilog0w9p0hr9","_id":"cjpo07s6f001filog4j75qiso"},{"post_id":"cjpo07s63000milogklvhbhed","category_id":"cjpo07s6d0018ilogh46tfe0n","_id":"cjpo07s6f001hilogsrnoon5u"},{"post_id":"cjpo07s64000oilog7fxe4exr","category_id":"cjpo07s6f001diloguqxzocvv","_id":"cjpo07s6g001kilogdvcvstvl"},{"post_id":"cjpo07s67000silogdmwf5k2k","category_id":"cjpo07s6f001gilogakqz2td7","_id":"cjpo07s6g001qilogk5jc1jxp"},{"post_id":"cjpo07s68000uilogag1u669t","category_id":"cjpo07s6f001gilogakqz2td7","_id":"cjpo07s6h001uiloga63ntdp9"},{"post_id":"cjpo07s69000xilogihw0o9s7","category_id":"cjpo07s6d0018ilogh46tfe0n","_id":"cjpo07s6i001xilog38zckiim"},{"post_id":"cjpo07s6a000zilogmbhal30j","category_id":"cjpo07s6h001tilogjwouoatr","_id":"cjpo07s6i0021ilogwlnhbmxx"},{"post_id":"cjpo07s6b0012iloglqcn89h3","category_id":"cjpo07s6i001yilog2w3wyp25","_id":"cjpo07s6j0026iloghp36w6qf"},{"post_id":"cjpo07s6c0014ilog9b7i51jr","category_id":"cjpo07s6d0018ilogh46tfe0n","_id":"cjpo07s6k0028ilogejfe069p"},{"post_id":"cjpo07s6d0017ilogfcyuuuer","category_id":"cjpo07s6d0018ilogh46tfe0n","_id":"cjpo07s6l002cilogpwi3qov3"}],"PostTag":[{"post_id":"cjpo07s5k0000ilogvg78pm3g","tag_id":"cjpo07s5q0004ilog9pg5kfqs","_id":"cjpo07s5t000ailog3tu13s9b"},{"post_id":"cjpo07s5n0002ilog04ar618x","tag_id":"cjpo07s5t0009ilogc5fm6vib","_id":"cjpo07s61000hilogghcqw4lq"},{"post_id":"cjpo07s5q0005ilogymnn7xg4","tag_id":"cjpo07s5y000filogttsu6b2e","_id":"cjpo07s64000nilogj3k77t2j"},{"post_id":"cjpo07s5s0007ilogtkhz2hg3","tag_id":"cjpo07s62000lilog9iy3q1f0","_id":"cjpo07s68000tilogmtsi6oiq"},{"post_id":"cjpo07s5t000bilogy3ei8tkk","tag_id":"cjpo07s67000rilog4vphlc08","_id":"cjpo07s6c0015ilog66xryxpb"},{"post_id":"cjpo07s5t000bilogy3ei8tkk","tag_id":"cjpo07s69000yilogj7hjzw5c","_id":"cjpo07s6d0019ilogpdwbpch5"},{"post_id":"cjpo07s5z000gilogn29z4ojp","tag_id":"cjpo07s6b0013ilogn9cyhkyf","_id":"cjpo07s6g001jilogoj1tb0us"},{"post_id":"cjpo07s5z000gilogn29z4ojp","tag_id":"cjpo07s6d001ailognn5tjgz1","_id":"cjpo07s6g001milogbzgcy09s"},{"post_id":"cjpo07s5z000gilogn29z4ojp","tag_id":"cjpo07s6f001eilogdsqo63ow","_id":"cjpo07s6g001oiloghlizbrgq"},{"post_id":"cjpo07s61000iilogqa7bytpa","tag_id":"cjpo07s6f001iilog0ksp0gxb","_id":"cjpo07s6h001silogn50cga16"},{"post_id":"cjpo07s61000iilogqa7bytpa","tag_id":"cjpo07s6g001niloggqeo5vkp","_id":"cjpo07s6h001vilogptxl9by2"},{"post_id":"cjpo07s63000milogklvhbhed","tag_id":"cjpo07s6h001rilog8fmq1s6a","_id":"cjpo07s6i0020ilogujf4hmv0"},{"post_id":"cjpo07s63000milogklvhbhed","tag_id":"cjpo07s6h001wilogb8miw8ca","_id":"cjpo07s6j0023ilog4zcnls2b"},{"post_id":"cjpo07s64000oilog7fxe4exr","tag_id":"cjpo07s6i001zilog60ym0itz","_id":"cjpo07s6k0029ilog9dnomuo5"},{"post_id":"cjpo07s64000oilog7fxe4exr","tag_id":"cjpo07s6j0024ilogmfp3pdhs","_id":"cjpo07s6k002ailogcx5un3dd"},{"post_id":"cjpo07s67000silogdmwf5k2k","tag_id":"cjpo07s6k0027ilog1mhq00ap","_id":"cjpo07s6l002eilogw9716wj2"},{"post_id":"cjpo07s67000silogdmwf5k2k","tag_id":"cjpo07s6k002bilog4aif3qxn","_id":"cjpo07s6l002filog3ko3f63p"},{"post_id":"cjpo07s68000uilogag1u669t","tag_id":"cjpo07s6k0027ilog1mhq00ap","_id":"cjpo07s6l002hilogv2x5vetm"},{"post_id":"cjpo07s69000xilogihw0o9s7","tag_id":"cjpo07s6h001rilog8fmq1s6a","_id":"cjpo07s6m002lilogbv7ki0r7"},{"post_id":"cjpo07s69000xilogihw0o9s7","tag_id":"cjpo07s6m002iilogojmnf9r3","_id":"cjpo07s6m002milogo8i46t0q"},{"post_id":"cjpo07s69000xilogihw0o9s7","tag_id":"cjpo07s6m002jilog8l1cb2xk","_id":"cjpo07s6m002oilogdv3rpl9l"},{"post_id":"cjpo07s6a000zilogmbhal30j","tag_id":"cjpo07s5y000filogttsu6b2e","_id":"cjpo07s6m002pilogi4gujhw8"},{"post_id":"cjpo07s6a000zilogmbhal30j","tag_id":"cjpo07s6m002kiloggoonf9ln","_id":"cjpo07s6n002rilogy6m45xi7"},{"post_id":"cjpo07s6b0012iloglqcn89h3","tag_id":"cjpo07s6m002nilogj7wps4dr","_id":"cjpo07s6n002uilogwf3puprk"},{"post_id":"cjpo07s6b0012iloglqcn89h3","tag_id":"cjpo07s6n002qilogvurajrwt","_id":"cjpo07s6n002vilogcnp5cbfh"},{"post_id":"cjpo07s6b0012iloglqcn89h3","tag_id":"cjpo07s6n002silogwut1lekj","_id":"cjpo07s6o002xiloggizpvqyu"},{"post_id":"cjpo07s6c0014ilog9b7i51jr","tag_id":"cjpo07s6h001rilog8fmq1s6a","_id":"cjpo07s6o002ziloge8hafbwv"},{"post_id":"cjpo07s6c0014ilog9b7i51jr","tag_id":"cjpo07s6h001wilogb8miw8ca","_id":"cjpo07s6o0030ilogktggph2d"},{"post_id":"cjpo07s6d0017ilogfcyuuuer","tag_id":"cjpo07s6h001rilog8fmq1s6a","_id":"cjpo07s6p0033ilogievlvlzt"},{"post_id":"cjpo07s6d0017ilogfcyuuuer","tag_id":"cjpo07s6h001wilogb8miw8ca","_id":"cjpo07s6p0034ilogjk1qz5b6"},{"post_id":"cjpo07s6e001bilogk9k2vjc1","tag_id":"cjpo07s6f001iilog0ksp0gxb","_id":"cjpo07s6q0038ilogpfmytrfa"},{"post_id":"cjpo07s6e001bilogk9k2vjc1","tag_id":"cjpo07s6p0035ilogy9pxjap3","_id":"cjpo07s6q0039ilogu67t3i08"},{"post_id":"cjpo07s6e001bilogk9k2vjc1","tag_id":"cjpo07s6p0036ilog8t23znk2","_id":"cjpo07s6q003ailogxr9dqykb"},{"post_id":"cjpo07s6e001bilogk9k2vjc1","tag_id":"cjpo07s6q0037ilogdnasqpdq","_id":"cjpo07s6q003biloggzyng1nk"}],"Tag":[{"name":"hexo","_id":"cjpo07s5q0004ilog9pg5kfqs"},{"name":"C++","_id":"cjpo07s5t0009ilogc5fm6vib"},{"name":"c++","_id":"cjpo07s5y000filogttsu6b2e"},{"name":"cpp","_id":"cjpo07s62000lilog9iy3q1f0"},{"name":"dns","_id":"cjpo07s67000rilog4vphlc08"},{"name":"domain","_id":"cjpo07s69000yilogj7hjzw5c"},{"name":"linux","_id":"cjpo07s6b0013ilogn9cyhkyf"},{"name":"shell","_id":"cjpo07s6d001ailognn5tjgz1"},{"name":"attack","_id":"cjpo07s6f001eilogdsqo63ow"},{"name":"c","_id":"cjpo07s6f001iilog0ksp0gxb"},{"name":"macro","_id":"cjpo07s6g001niloggqeo5vkp"},{"name":"设计模式","_id":"cjpo07s6h001rilog8fmq1s6a"},{"name":"李建中","_id":"cjpo07s6h001wilogb8miw8ca"},{"name":"server","_id":"cjpo07s6i001zilog60ym0itz"},{"name":"framework","_id":"cjpo07s6j0024ilogmfp3pdhs"},{"name":"ps","_id":"cjpo07s6k0027ilog1mhq00ap"},{"name":"sharpen","_id":"cjpo07s6k002bilog4aif3qxn"},{"name":"单例模式","_id":"cjpo07s6m002iilogojmnf9r3"},{"name":"java","_id":"cjpo07s6m002jilog8l1cb2xk"},{"name":"static","_id":"cjpo07s6m002kiloggoonf9ln"},{"name":"svm","_id":"cjpo07s6m002nilogj7wps4dr"},{"name":"math","_id":"cjpo07s6n002qilogvurajrwt"},{"name":"machine learning","_id":"cjpo07s6n002silogwut1lekj"},{"name":"yara","_id":"cjpo07s6p0035ilogy9pxjap3"},{"name":"proc","_id":"cjpo07s6p0036ilog8t23znk2"},{"name":"api","_id":"cjpo07s6q0037ilogdnasqpdq"}]}}